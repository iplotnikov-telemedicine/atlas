from io import BytesIO
import win32security
from streamlit_option_menu import option_menu
import streamlit as st
import streamlit.components.v1 as components
from st_aggrid import AgGrid, GridUpdateMode
from st_aggrid.shared import DataReturnMode
from st_aggrid.grid_options_builder import GridOptionsBuilder
import base64
import pandas as pd
import os
import glob
import re
import numpy as np
from datetime import datetime, date
from itertools import cycle, repeat
from styling import *
import sqlite
from oracle import *
from time import sleep
from collections import defaultdict
import market
import chat
import td
from tfs import get_work_items, create_tfs_session
# from st_material_table import st_material_table
# pd.set_option('display.float_format','{:.0f}'.format)
pd.set_option('display.precision', 1)

title = 'atlas'
st.set_page_config(page_title=title,
    page_icon='üåç',
    layout='wide',
    initial_sidebar_state='expanded') #collapsed
    
# from streamlit.report_thread import get_report_ctx
# st.write(get_report_ctx())
# from streamlit.server.server import Server
# session_id = get_report_ctx().session_id
# session_info = Server.get_current()._get_session_info(session_id)
# print(session_id)
# print(session_info)


def get_base64_of_bin_file(bin_file):
    """
    function to read png file 
    ----------
    bin_file: png -> the background image in local folder
    """
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()


def set_png_as_page_bg(image_file):
    """
    function to display png as bg
    ----------
    png_file: png -> the background image in local folder
    """
    bin_str = get_base64_of_bin_file(image_file)
    _, img_ext = os.path.splitext(image_file)
    page_bg_img = '''
    <style>
    section[class="main css-1v3fvcr eknhn3m1"] {
    background-image: url("data:image/%s;base64,%s");
    background-size: cover;
    }
    </style>
    ''' % (img_ext, bin_str)
    
    st.markdown(page_bg_img, unsafe_allow_html=True)
    return


# @st.cache(allow_output_mutation=True)
def local_css(css_file):
    with open(css_file, encoding='utf8') as f:
        css_style = f.read()
    st.markdown('''<style>%s</style>''' % (css_style), unsafe_allow_html=True)


def get_base_tariff(tariff):
    if '–°—É–ø–µ—Ä' in tariff:
        base_tariff = tariff.replace("–°—É–ø–µ—Ä", "–ú–æ–π")
    elif '–ü—Ä–æ–º–æ' in tariff:
        base_tariff = tariff.replace("–ü—Ä–æ–º–æ", "")
    else:
        base_tariff = tariff
    base_tariff = re.sub("[0-9]", "", base_tariff)
    base_tariff = base_tariff.strip()
    return base_tariff


@st.experimental_memo(show_spinner=True)
def branch_to_region(branch):
    region = branch
    replace_dict = {
        '–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫':'–•–ú–ê–û',
        '–°–∞–ª–µ—Ö–∞—Ä–¥': '–Ø–ù–ê–û',
        '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É':'–†–æ—Å—Ç–æ–≤',
        ' NEW': '',
        '–í–µ–ª–∏–∫–∏–π ': '–í.',
        '–ù–∏–∂–Ω–∏–π ': '–ù.',
        '–°–∞–Ω–∫—Ç-': '–°.',
    }
    for k, v in replace_dict.items():
        region = region.replace(k, v)
    return region


@st.experimental_memo(show_spinner=True)
def region_to_td_region(region):
    replace_dict = {
        '–ê–±–∞–∫–∞–Ω': '–•–∞–∫–∞—Å–∏—è',
        '–ô–æ—à–∫–∞—Ä-–û–ª–∞': '–ú–∞—Ä–∏–π –≠–ª',
        '–£–ª–∞–Ω-–£–¥—ç': '–ë—É—Ä—è—Ç–∏—è',
        '–ß–µ–±–æ–∫—Å–∞—Ä—ã': '–ß—É–≤–∞—à–∏—è',
        '–†–æ—Å—Ç–æ–≤': '–†–æ—Å—Ç–æ–≤ –Ω–∞ –î–æ–Ω—É',
        '–ù–æ—Ä–∏–ª—å—Å–∫':	'–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
        '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä –∏ –ê–¥—ã–≥–µ—è'
    }
    for k, v in replace_dict.items():
        region = region.replace(k, v)
    return region


# TABLES_DICT = {'PRODUCT_CHANGES':'PRODUCT_CHANGES','INSTALLMENTS':'INSTALLMENTS'}
OVER_THEME = {'txc_inactive': 'white','menu_background':'#07090a','txc_active':'white','option_active':'#1f2229'}
FONT_FMT = {'font-class':'h2','font-size':'150%'}

SERVERNAME = 'corp.tele2.ru'

CLUSTERS = ['Saint Petersburg', 'Moscow', 'Challenger Elite', 'Challenger',
       'Defender', 'Share hungry']

M = [['–°—É–ø–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä 3', '–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω 2', '–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 1', '–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 3', None, '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π'],
             ['–°—É–ø–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä 2', '–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω 1', '–ú–æ–π –æ–Ω–ª–∞–π–Ω+', '–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 2', None, 'Premium'],
             ['–°—É–ø–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä 1', '–ú–æ–π –æ–Ω–ª–∞–π–Ω', '–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω 3', '–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω 4', None, None],
             ['–ú–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä', '–°—É–ø–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä 4', '–°—É–ø–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä 5', '–°—É–ø–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä 6', None, None]
             ]

FEE_CONDITION_TARIFFS = ['–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 1', '–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 3', '–ú–æ–π –æ–Ω–ª–∞–π–Ω+', '–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 2']

MARKET_COLUMNS = [
    'REGION_NAME', 'CLUSTER_NAME', 'REPORT_DATE', 'OPERATOR', 'TARIFF_TYPE', 'IS_SHELF',
    'TARIFF_NAME', 'FEE_STR', 'FEE_TYPE', 'VOICE_MIN_STR', 'DATA_GB_STR', 'SMS_STR', 'USAGE', 
    'UNLIM', 'INTERNET_EXTRA', 'VOICE_NOTES', 'DATA_NOTES', 'PROMO', 'TARIFF_INDEX'
]

CONSTRUCTOR_PARAMS = [
    'FEE_TYPE', 'IS_SHELF', 'IS_CONVERGENT', 'FEE', 'IS_FEE_DISCOUNT', 'FEE_AFTER_DISCOUNT',
    'VOICE_MIN', 'DATA_GB', 'EXTRA', 'USAGE', 'INTERNET_EXTRA', 
]

TOOLTIP_DICT = {
    'OPERATOR':'–û–ø–µ—Ä–∞—Ç–æ—Ä',
    'TARIFF':'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞',
    'FEE_TYPE':'–ú–µ—Ç–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è',
    'IS_SHELF':'–ü–æ–ª–æ—á–Ω—ã–π',
    'IS_CONVERGENT':'–ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ç–Ω—ã–π',
    'FEE':'–ê–ü',
    'IS_FEE_DISCOUNT':'–ï—Å—Ç—å —Å–∫–∏–¥–∫–∞ –Ω–∞ –ê–ü',
    'FEE_AFTER_DISCOUNT':'–ê–ü –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏',
    'VOICE_MIN':'–ü–∞–∫–µ—Ç –º–∏–Ω—É—Ç',
    'DATA_GB':'–ü–∞–∫–µ—Ç data',
    'PROMO': '–ü—Ä–æ–º–æ',
    'USAGE':'–ö—É–¥–∞ –¥–µ–π—Å—Ç–≤—É—é—Ç',
    'INTERNET_EXTRA':'–ò–Ω—Ç–µ—Ä–Ω–µ—Ç, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'
}





def check_matrice(M, direction):
    '''
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤, –µ—Å–ª–∏ direction='columns'
    –∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç—Ä–æ–∫, –µ—Å–ª–∏ direction='rows'
    '''
    if direction == 'rows':
        M = np.transpose(M[::-1])
    elif direction == 'diagonal':
        M = np.fliplr(M)
    elif direction == 'columns':
        pass
    true_list = []
    if direction  in ['rows','columns']:
        for cur_x in range(len(M)):
            for cur_y in range(1, len(M[cur_x])):
                for other_y in range(len(M[cur_x])):
                    if other_y < cur_y:
                        must_be_less = M[cur_x][other_y]
                        must_be_more = M[cur_x][cur_y]
                        if must_be_less and must_be_more:
                            true_list.append(must_be_less < must_be_more)
    elif direction == 'diagonal':
        for cur_x in range(1, len(M)):
            for cur_y in range(1, len(M[cur_x])):
                for n in range(1, len(M)):
                    if cur_x >= n and cur_y >= n:
                        must_be_less = M[cur_x][cur_y]
                        must_be_more = M[cur_x - n][cur_y - n]
                        if must_be_less and must_be_more:
                            true_list.append(must_be_less < must_be_more)
    return all(true_list)


# def check_fee(dict=dict()):
#     temp_M = [row[0:4] for row in M]
#     for row_num, row in enumerate(temp_M):
#         for col_num, tar in enumerate(row):
#             if dict:
#                 if tar in dict:
#                     temp_M[row_num][col_num] = dict.get(tar)
#             elif tar == st.session_state.TARIFF:
#                 temp_M[row_num][col_num] = st.session_state['FEE']
#             else:
#                 temp_M[row_num][col_num] = st.session_state['FEE_M'][row_num][col_num]
#     return all([check_matrice(temp_M, direction='columns'),
#         check_matrice(temp_M, direction='rows'),
#         check_matrice(temp_M, direction='diagonal')])


def check_if_accept_changes(branch=None):
    '''
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –ø–∞–∫–µ—Ç–∞–º –∏ –ê–ü
    '''
    check_dict = {}
    for check_metric in ['FEE', 'DATA_GB', 'VOICE_MIN']:
        temp_M = [row[0:4] for row in M]
        for row_num, row in enumerate(temp_M):
            for col_num, tar in enumerate(row):
                if tar == st.session_state.TARIFF:
                    temp_M[row_num][col_num] = st.session_state[check_metric]
                else:
                    temp_M[row_num][col_num] = st.session_state[f'{check_metric}_M'][row_num][col_num]
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –≤ –º–∞—Ç—Ä–∏—Ü–µ
        if check_metric == 'FEE':
            # if branch != '–°–∞–º–∞—Ä–∞ NEW':
            check_dict[check_metric] = all([check_matrice(temp_M, direction='columns'),
                                            check_matrice(temp_M, direction='rows'),
                                            check_matrice(temp_M, direction='diagonal')])
        elif check_metric == 'DATA_GB':
            check_dict[check_metric] = check_matrice(temp_M, direction='rows')
        elif check_metric == 'VOICE_MIN':
            check_dict[check_metric] = check_matrice(temp_M, direction='columns')
    return check_dict
    

SO_PLUS_BRANCHES = [
    '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
    '–°–∞–ª–µ—Ö–∞—Ä–¥',
    '–°–∞—Ä–∞—Ç–æ–≤',
    '–°–∞—Ö–∞–ª–∏–Ω',
    '–ë–∏—Ä–æ–±–∏–¥–∂–∞–Ω',
    '–û—Ä–µ–Ω–±—É—Ä–≥',
    '–ß–µ–±–æ–∫—Å–∞—Ä—ã',
    '–ö–∞–º—á–∞—Ç–∫–∞',
    '–ü–µ–Ω–∑–∞',
    '–ö–∞–ª—É–≥–∞',
    '–í–æ–ª–≥–æ–≥—Ä–∞–¥',
    '–ê–±–∞–∫–∞–Ω',
    '–£–ª—å—è–Ω–æ–≤—Å–∫',
    '–ö–∏—Ä–æ–≤',
    '–ü—Å–∫–æ–≤',
    '–ú–æ—Å–∫–≤–∞',
]

M16 = [row[:4] for row in M]
M16_list =  [val for sublist in M16 for val in sublist]
COLUMNS_TO_RENDER = ['OPERATOR', 'TARIFF', 'FEE_TYPE', 'FEE', 'FEE_AFTER_DISCOUNT',
                'DATA_GB', 'VOICE_MIN', 'USAGE', 'INTERNET_EXTRA', 'ACTION']

if 'inst_periods' not in st.session_state: st.session_state.inst_periods = list(range(1, 31))
if 'is_constructor' not in st.session_state: st.session_state.is_constructor = False
if 'sidebar_id' not in st.session_state: st.session_state.sidebar_id = None
if 'scenario_name' not in st.session_state: st.session_state.scenario_name = None
if 'constructor' not in st.session_state: st.session_state.constructor = dict()
if 'action_record' not in st.session_state: st.session_state.action_record = dict()
if 'tele2_tariffs' not in st.session_state: st.session_state.tele2_tariffs = list()
if '–û–ø–µ—Ä–∞—Ç–æ—Ä' not in st.session_state: st.session_state['–û–ø–µ—Ä–∞—Ç–æ—Ä'] = 'Tele2'
if 'BRANCH_NAME' not in st.session_state: st.session_state.BRANCH_NAME = '–ê–±–∞–∫–∞–Ω NEW'
if 'REGION_NAME' not in st.session_state: st.session_state.REGION_NAME = branch_to_region(st.session_state.BRANCH_NAME)
if 'market_view' not in st.session_state: st.session_state.market_view = 'main'
if 'main_page_id' not in st.session_state: st.session_state.main_page_id = '–†—ã–Ω–æ–∫'


def check_one_row(tar1, tar2):
    for row in M16:
        if tar1 in row and tar2 in row:
            return True
    return False


def check_one_column(tar1, tar2):
    temp_M = np.transpose(M16)
    for row in temp_M:
        if tar1 in row and tar2 in row:
            return True
    return False    



curdir = os.path.dirname(os.path.realpath(__file__)) + '\\'
css_file = os.path.join(curdir, r'style.css')
local_css(css_file)


def update_launch_name():
    st.session_state.LAUNCH_NAME = st.session_state.SEL_LAUNCH_NAME


def get_back_to_branches():
    st.session_state.TARIFF = None
    st.session_state.sidebar_id = None
    if 'region_scenario' in st.session_state:
        del st.session_state.region_scenario


def get_back_to_scenarios():
    st.session_state.market_view = 'main'
    st.session_state.sidebar_id = '–°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤'
    if 'region_scenario' in st.session_state:
        del st.session_state.region_scenario


def cancel_edit():
    st.session_state.dic_copy_from = None
    st.session_state.is_tariff_copying = False
    st.session_state.TARIFF = None


if 'TARIFF' not in st.session_state: st.session_state.TARIFF = None
if 'USERNAME' not in st.session_state: st.session_state.USERNAME = None
if 'show_what' not in st.session_state: st.session_state.show_what = 'matrice'
if 'branch_index' not in st.session_state: st.session_state.branch_index = 0
if 'scenarios' not in st.session_state: st.session_state.scenarios = list()


data_gb_options = [0, 1, 2, 3, 5, 6, 7, 8, 10, 12, 15, 20, 25, 30, 35, 40, 45, 50, 60]
voice_min_options = [0,100,150,200,250,300,350,400,450,500,550,600,650,700,800,900,1000,1500,2000,3000]

def convert_to_excel(df, drop_index=False):
    """ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç xlsx-–æ–±—ä–µ–∫—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    df.reset_index(inplace=True, drop=drop_index)
    df.to_excel(writer, sheet_name='Sheet1', startrow=1, header=False, index=False)
    workbook = writer.book
    worksheet = writer.sheets['Sheet1']
    (max_row, max_col) = df.shape
    column_settings = [{'header': column} for column in df.columns]
    worksheet.add_table(0, 0, max_row, max_col - 1, {'columns': column_settings})
    worksheet.set_column(0, max_col - 1, 12)
    writer.save()
    processed_data = output.getvalue()
    return processed_data


def get_table_download_link(df, short_name, drop_index=False):
    """ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è checklists.xlsx"""
    val = convert_to_excel(df, drop_index=drop_index)
    b64 = base64.b64encode(val)  # val looks like b'...'
    href = f'''<a style="color: #00aae5;" href="data:application/octet-stream;base64,{b64.decode()}" 
        download="{short_name}.xlsx">–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É</a>'''
    return href



# def get_df(conn, dicts, columns, index_columns=None):
#     df = pd.DataFrame(columns=columns)
#     # dtype = {k:v for k,v in get_dtypes(conn, table).items() if k in df.columns}
#     # df = df.astype(dtype, errors='ignore')
#     df = pd.concat([df, pd.DataFrame.from_records([dic for dic in dicts])])
#         # df.append(dic, ignore_index=True, sort=False)
#     st.session_state.repr_dic = sqlite.get_repr_dic(conn)
#     if index_columns:
#         df.set_index(index_columns, inplace=True)
#     df.rename(index=str,
#         columns={col_name: st.session_state.repr_dic.get(col_name, f'–°—Ç–æ–ª–±–µ—Ü {col_num}') for col_num, col_name in enumerate(df.columns)}, 
#         inplace=True)
#     # df.rename(columns, axis=1, inplace=True)
#     return df



# @st.cache(allow_output_mutation=True)
def set_up_main_page(conn, show='matrice'):

    # st.radio('', options=['–†—ã–Ω–æ–∫', '–ó–∞–ø—É—Å–∫', '–ß–µ–∫-–ª–∏—Å—Ç', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏'], key='main_page_id', on_change=get_back_to_branches)
    # st.write('')

    def populate_matrice(matrice, direction):
        if direction == 'columns':
            matrice = np.transpose(matrice)
        for row_num, row in enumerate(matrice):
            for value in row:
                if value: matrice[row_num] = list(repeat(value, len(row)))
        if direction == 'columns':
            matrice = np.transpose(matrice).tolist()
        return matrice

        
    def get_matrice(metric, records):
        matrice = [row[0:4] for row in M]
        fee_dic = dict()
        for record in records:
            fee_dic.update({record['TARIFF'] : record[metric]})
        for row_num, row in enumerate(matrice):
            for col_num, tar in enumerate(row):
                matrice[row_num][col_num] = fee_dic.get(tar, None)
        return matrice


    def send_for_setup():
        for table in ['PRODUCT_CHANGES', 'INSTALLMENTS']:
            records = sqlite.get_product_changes(
                conn, table, st.session_state.PRODUCT_CLUSTER_NAME, st.session_state.LAUNCH_NAME
            )
            with st.spinner(text=f'–ú–µ–Ω—è—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ {table} ...'):
                update(table, st.session_state.PRODUCT_CLUSTER_NAME, st.session_state.LAUNCH_NAME)
            with st.spinner(text=f'–î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ {table} ...'):
                insert(table, records) 
            

    def show_send_cluster_for_setup(cluster, launch_name):
        some_branches_completed = sqlite.get_not_empty_branches(conn, cluster, launch_name)
        if st.session_state.PRODUCT_CLUSTER_NAME != '(All)':
            if some_branches_completed:
                if st.session_state.cluster_status != 'setup':
                    btn_text = f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å {st.session_state.PRODUCT_CLUSTER_NAME} –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫—É üîß'
                else:
                    btn_text = f'–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {st.session_state.PRODUCT_CLUSTER_NAME} –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫—É üîß'
                cols = st.columns([3, 1.5, 3])
                send_for_setup_btn = cols[1].button(btn_text, help='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
                if send_for_setup_btn:
                    try:
                        send_for_setup()
                    except Exception as e:
                        print(e)
                        st.error('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
                        st.stop()
                    else:
                        for branch in some_branches_completed:
                            st.session_state.BRANCH_NAME = branch
                            sqlite.add_branch_status(conn, st.session_state, status='setup')
                        with st.balloons():
                            sleep(2)
                        st.experimental_rerun()
        else:
            if some_branches_completed:
                st.info('–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä')


    def reject_branch():
        sqlite.add_branch_status(conn, st.session_state, status='rejected')
        # st.experimental_rerun()


    def show_rejecting_branch():
        st.markdown('&nbsp;')
        cols = st.columns([6, 2, 6])
        cols[1].button('–í–µ—Ä–Ω—É—Ç—å –±—Ä–∞–Ω—á –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É üë©üèº‚Äçüè´', on_click=reject_branch)


    def show_send_branch_for_approval():
        st.markdown('&nbsp;')
        if st.session_state.actual_tariffs:
            cols = st.columns([6, 2, 6])
            send_branch_status_btn = cols[1].button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ üêæ')
            if send_branch_status_btn:
                try:
                    sqlite.add_branch_status(conn, st.session_state, status='sent')
                except Exception as e:
                    print(e)
                    st.error('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
                    st.stop()
                else:
                    with st.balloons():
                        sleep(2)
                    st.experimental_rerun()
        else:
            st.info('C–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∞—Ä–∏—Ñ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ') 


    def show_send_or_reject(user_rights):
        if user_rights.get('IS_OWNER'):
            if st.session_state.branch_status in ('sent','setup'):
                show_rejecting_branch()
        elif user_rights.get('IS_INITIATOR'):
            if st.session_state.branch_status not in ('sent','setup'):
                show_send_branch_for_approval()

       
    def edit_tar(tar):
        if 'all_reg' in st.session_state:
            del st.session_state.all_reg
        st.session_state.TARIFF = tar

   
    

    if st.session_state.main_page_id == '–ó–∞–ø—É—Å–∫':
        # st.map(get_lat_long_df(st.session_state.BRANCH_NAME), zoom=8, use_container_width=False)
        
        stylize_header(st.session_state.BRANCH_NAME)
        st.write('')
        

        def show_last_branch_status():
            st.markdown('&nbsp;')
            status_time, username = sqlite.get_branch_status_meta(conn, st.session_state.BRANCH_NAME, st.session_state.LAUNCH_NAME)
            # st.session_state.branch_status
            if st.session_state.branch_status == 'setup':
                st.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫—É {status_time} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username} üîß')
            if st.session_state.branch_status == 'sent':
                st.success(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ {status_time} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username} üïë')
            elif st.session_state.branch_status == 'rejected':
                st.success(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É {status_time} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username} üïë')
            elif st.session_state.branch_status == 'editing':
                st.success(f'–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É {status_time} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username} ‚úçÔ∏è')

        
        
        def generate_sim_matrice(records):
            # if st.session_state.BRANCH_NAME in ('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ NEW'):
            #     M[-1][-1] = '–ú–æ–π –æ–Ω–ª–∞–π–Ω+ –ü—Ä–æ–º–æ'
            # if st.session_state.BRANCH_NAME.replace(' NEW','') in SO_PLUS_BRANCHES:
            #     M[-1][-1] = '–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+'
            ALL_TARIFFS = [value for sublist in M for value in sublist if value]
            for row_num, row in enumerate(M):
                main_cols = st.columns([1, 2, 2, 2, 2, 0.5, 2])
                gb = next((v for v in st.session_state.DATA_GB_M[row_num] if v is not None), None)
                with main_cols[0]:
                    stylize_gb(f'{str(int(gb))} –ì–±' if gb else '&nbsp;')
                for col_num, tar in enumerate(row, start=1):
                    if tar in ALL_TARIFFS:
                        rec = next((rec for rec in records if rec['TARIFF'] == tar), {'TARIFF':tar})
                        # base_tar = get_base_tariff(tar)
                        is_valid = rec.get('IS_VALID', True)
                        is_lightened = rec.get('IS_THIS_LAUNCH', False)
                        with main_cols[col_num].container():
                            with st.form(key=f'{tar}'):
                                tar_name = rec.get('TARIFF_NAME')
                                if tar == st.session_state.TARIFF:
                                    sim = draw_sim(row_num, col_num, (tar_name if tar_name else tar), rec, selected=False, valid=is_valid, is_lightened=is_lightened)
                                    st.markdown(sim, unsafe_allow_html=True)
                                    st.form_submit_button('', on_click=cancel_edit)
                                else:
                                    sim = draw_sim(row_num, col_num, (tar_name if tar_name else tar), rec, selected=True, valid=is_valid, is_lightened=is_lightened)
                                    st.markdown(sim, unsafe_allow_html=True)
                                    st.form_submit_button('', on_click=edit_tar, args=(tar, ))
                        # elif base_tar != tar:
                        #     base_rec = next((base_rec for base_rec in records if base_rec['TARIFF'] == base_tar), {'TARIFF':base_tar})
                        #     if base_rec:
                        #         with main_cols[col_num].container():
                        #             with st.form(key=f'{tar}'):
                        #                 if tar == st.session_state.TARIFF:
                        #                     draw_sim(row_num, col_num, tar, rec, selected=False, valid=is_valid, is_lightened=is_lightened)
                        #                     st.form_submit_button('', on_click=cancel_edit)
                        #                 else:
                        #                     draw_sim(row_num, col_num, tar, rec, selected=True, valid=is_valid, is_lightened=is_lightened)
                        #                     st.form_submit_button('', on_click=edit_tar, args=(tar, ))
                        #     else:
                        #         with main_cols[col_num].container():
                        #             draw_sim(row_num, col_num, tar, rec, locked=True)
                    else:
                        pass
                        # main_cols[col_num].markdown('&nbsp;')
            VOICE_MIN_M_tr = np.transpose(st.session_state.VOICE_MIN_M)
            for col_num, row in enumerate(VOICE_MIN_M_tr):
                voice = next((v for v in row if v is not None), None)
                with main_cols[col_num + 1]:
                    stylize_voice(f'{str(int(voice))} –º–∏–Ω' if voice else '&nbsp;')


        def add_validation(records):
            fee_dict = dict()
            for rec in records:
                tariff = rec.get('TARIFF')
                if tariff in FEE_CONDITION_TARIFFS:
                    fee_dict[tariff] = rec.get('FEE', 0)
            tariffs_count = sum([x != 0 for x in fee_dict.values()])
            if tariffs_count == 4:
                fee_diff = (fee_dict['–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 1'] + fee_dict['–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 2']) - (fee_dict['–ú–æ–π –æ–Ω–ª–∞–π–Ω+'] + fee_dict['–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 3'])
            else:
                fee_diff = 0
            for rec in records:
                rec['IS_THIS_LAUNCH'] = (True if rec.get('LAUNCH_NAME') == st.session_state.LAUNCH_NAME else False)
                tariff = rec.get('TARIFF')
                if fee_diff != 0 and tariff in FEE_CONDITION_TARIFFS:
                    rec['IS_VALID'] = False
                else:
                    rec['IS_VALID'] = True
            return records


        # –ü–û–õ–£–ß–ê–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ó–ê–ü–ò–°–ò
        st.session_state.records = sqlite.get_records_by_branch(conn,
            st.session_state.LAUNCH_NAME, 
            st.session_state.launch_type, 
            st.session_state.BRANCH_NAME
        )
        st.session_state.records = add_validation(st.session_state.records)
        # st.session_state.records
        st.session_state.this_launch_records = [rec for rec in st.session_state.records if rec.get('IS_THIS_LAUNCH')]
        # st.session_state.this_launch_records


        # –ü–û–õ–£–ß–ê–ï–ú –ú–ê–¢–†–ò–¶–´ –ê–ü –ò –ü–ê–ö–ï–¢–û–í
        st.session_state.FEE_M = get_matrice('FEE', st.session_state.this_launch_records)
        st.session_state.VOICE_MIN_M = populate_matrice(
            get_matrice('VOICE_MIN', st.session_state.this_launch_records), direction='columns')
        st.session_state.DATA_GB_M = populate_matrice(
            get_matrice('DATA_GB', st.session_state.this_launch_records), direction='rows')

        # –°–¢–†–û–ò–ú –ú–ê–¢–†–ò–¶–£
        # st.markdown('&nbsp;')
        if not st.session_state.LAUNCH_NAME:
            st.markdown('''<p style="text-align: center; color: #758586">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ üòü</p>''', unsafe_allow_html=True)
        else:
            with st.container():
                generate_sim_matrice(st.session_state.records)
                # st.session_state.this_launch_records
                show_send_or_reject(st.session_state.user_rights)
                show_last_branch_status()

    elif st.session_state.main_page_id == '–†—ã–Ω–æ–∫':

        def get_files(folder_path):
            files = glob.glob(folder_path + '\–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö*.xlsx')
            files.sort(key=lambda x: os.path.getmtime(x), reverse=True)
            return iter(files)
            

        @st.experimental_memo(show_spinner=False)
        def get_date_from_filename(filename):
            max_date_str = os.path.splitext(filename)[0].split('_')[-1]
            max_date = datetime.strptime(max_date_str, "%d.%m.%y").date()
            return date.strftime(max_date, "%Y-%m-%d")


        @st.experimental_memo(show_spinner=False)
        def get_df_by_path(path):
            df = pd.read_excel(path, sheet_name='–°–≤–æ–¥', usecols='A:S', names=MARKET_COLUMNS)
            df['REPORT_DATE'] = df['REPORT_DATE'].astype(str)
            df = df.reindex(columns = list(df.columns),  fill_value = np.NaN).where((pd.notnull(df)), None)
            return df


        with st.container():
            header = st.session_state.BRANCH_NAME
            if 'region_scenario' in st.session_state: header += f''': {st.session_state.scenario_name}'''
            stylize_header(header)
                

        with st.spinner(text='–ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞...'):
            folder_path = r'\\corp.tele2.ru\plm_cluster\All\–§–æ—Ä–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'
            files = glob.glob(folder_path + '\–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö*.xlsx')
            files_dict = {}
            for file in files:
                files_dict[file] = datetime.fromtimestamp(os.path.getmtime(file)).strftime('%Y-%m-%d %H:%M:%S') 
            local_max_time = max(files_dict.values())
            base_max_time = sqlite.get_market_max_date_time(conn)
            if local_max_time > base_max_time:
                latest_file = max(files_dict, key = files_dict.get)
                try:
                    market_df = get_df_by_path(latest_file)
                    market_df['DATE_TIME'] = local_max_time
                except PermissionError:
                    st.session_state.market_time = base_max_time
                else:
                    with st.spinner(text='–ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞...'):
                        sqlite.update_market(conn, market_df)
                    st.session_state.market_time = local_max_time
            else:
                st.session_state.market_time = local_max_time

        with st.spinner(text='–ì–æ—Ç–æ–≤–ª—é —Ä—ã–Ω–æ—á–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É...'):
            st.session_state.region_market = sqlite.get_region_market_df(conn, st.session_state.REGION_NAME)        
        

        st.session_state.td_session = td.get_db_connection(date.today())
        td_region = region_to_td_region(st.session_state.REGION_NAME)
        
        with st.spinner(text='–ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ–¥–∞–∂–∏ –∏ –º–∏–≥—Ä–∞—Ü–∏–∏...'):
            with st.expander('SALES MIX & MIGRATIONS MIX'):
                st.write('')
                td.show_charts(st.session_state.td_session, td_region, 200)
                
        def format_operator(operator):
            dict = {'Tele2': 'T2', '–ú–µ–≥–∞—Ñ–æ–Ω': 'MGF', '–ú–¢–°': 'MTS', '–±–∏–ª–∞–π–Ω': 'BEE', '–ú–æ—Ç–∏–≤': 'MOT', '–õ–µ—Ç–∞–π': 'LET'}
            if st.session_state.shares:
                return f'{dict.get(operator, operator)} ({st.session_state.shares.get(operator, 0):.1%})'
            else:
                return f'{dict.get(operator, operator)}'


        if not st.session_state.region_market.empty:
            with st.spinner(text='–ó–∞–≥—Ä—É–∂–∞—é –¥–æ–ª–∏ —Ä—ã–Ω–∫–∞...'):
                st.session_state.shares = td.get_shares(st.session_state.td_session, td_region)
            operators = st.session_state.region_market['OPERATOR'].unique()
            cols = st.columns([3,0.2,0.9,0.9])
            cols[0].multiselect(label='', key='operators', options=operators, default=operators,
                format_func=format_operator
            )  
            cols[2].write('')   
            cols[2].write('')
            cols[2].checkbox('–¢–æ–ª—å–∫–æ –ø–æ–ª–æ—á–Ω—ã–µ', value=1, key='only_shelf')
            cols[3].write('')
            cols[3].write('')
            cols[3].checkbox('C –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ç–æ–º', value=1, key='include_convergent')
            

            
            

        if 'region_scenario' in st.session_state:

            def get_data_gb(row):
                if row['EXTRA'] == '–ù–µ—Ç' or not row['EXTRA']:
                    return row['DATA_GB']
                elif row['EXTRA'] == '5 GB':
                    return row['DATA_GB'] + 5
                elif row['EXTRA'] == '10 GB':
                    return row['DATA_GB'] + 10
                elif row['EXTRA'] == '15 GB':
                    return row['DATA_GB'] + 15
                elif row['EXTRA'] == '–£–¥–≤–æ–µ–Ω–∏–µ':
                    return row['DATA_GB'] * 2
                else:
                    return row['DATA_GB']


            df_to_render = st.session_state.region_scenario
            # st.dataframe(df_to_render)
            df_to_render.apply(lambda row: get_data_gb(row), axis=1)
            st.session_state.this_launch_records = [rec for rec in df_to_render[df_to_render['ACTION'] == '–ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ'].to_dict('records')]
            st.session_state.FEE_M = get_matrice('FEE', st.session_state.this_launch_records)
            st.session_state.VOICE_MIN_M = populate_matrice(
                get_matrice('VOICE_MIN', st.session_state.this_launch_records), direction='columns')
            st.session_state.DATA_GB_M = populate_matrice(
                get_matrice('DATA_GB', st.session_state.this_launch_records), direction='rows')
        else:
            df_to_render = st.session_state.region_market
  

        if st.session_state.only_shelf:
            df_to_render = df_to_render[df_to_render['IS_SHELF'] == 1]
        if not st.session_state.include_convergent:
            df_to_render = df_to_render[df_to_render['IS_CONVERGENT'] == 0]
        df_to_render = df_to_render[df_to_render['OPERATOR'].isin(st.session_state.operators)]
        
        # st.dataframe(df_to_render)
        if df_to_render.empty:
            st.markdown('''<p style="text-align: center; font-family: Source Sans Pro; color: #373839">
                –ë—Ä–∞–Ω—á –Ω–µ –Ω–∞–π–¥–µ–Ω üòü</p>''', unsafe_allow_html=True)
        else:
            st.markdown(f'''<p style="vertical-align: bottom; color: #515358;
                font-size: 12px; font-family: Tele2 TextSans; margin-bottom: 0;">
                –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {st.session_state.market_time}
            </p>''', unsafe_allow_html=True)
            components.html(
                market.render_market(df_to_render, TOOLTIP_DICT),
                height=900, 
                scrolling=False
            )

    elif st.session_state.main_page_id == '–ß–µ–∫-–ª–∏—Å—Ç':
        
        def show_last_cluster_status():
            # st.markdown('&nbsp;')
            status_time, username = sqlite.get_cluster_status_meta(conn, st.session_state.PRODUCT_CLUSTER_NAME, st.session_state.LAUNCH_NAME)
            if st.session_state.cluster_status == 'setup':
                st.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫—É {status_time} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username} üîß')
            if st.session_state.cluster_status == 'sent':
                if st.session_state.user_rights.get('IS_INITIATOR'):
                    st.success(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ {status_time} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username} üïë')
            elif st.session_state.cluster_status == 'rejected':
                if st.session_state.user_rights.get('IS_OWNER'):
                    st.success(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É {status_time} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username} üïë')


        branch_name_col, right_upper_col = st.columns([4, 6])
        with branch_name_col:
            stylize_header(st.session_state.PRODUCT_CLUSTER_NAME)

        checklists = ['–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã','–†–∞—Å—Å—Ä–æ—á–∫–∏']
        if st.session_state.user_rights.get('IS_OWNER'): checklists.extend(['–ú–∏–∫—Ä–æ–ø–∞–∫–µ—Ç—ã', '–°–±–æ—Ä–∫–∏'])
        right_upper_col.radio('', key='table_to_show', options=checklists)

        if st.session_state.table_to_show == '–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã':
            with st.spinner(text=f'–§–æ—Ä–º–∏—Ä—É—é —á–µ–∫-–ª–∏—Å—Ç —Å —Ç–∞—Ä–∏—Ñ–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {st.session_state.PRODUCT_CLUSTER_NAME}...'):
                product_changes = sqlite.get_this_launch_records(conn,
                    'PRODUCT_CHANGES',
                    st.session_state.PRODUCT_CLUSTER_NAME, 
                    st.session_state.LAUNCH_NAME
                )
                df = pd.DataFrame.from_records(product_changes)
                repr_dic = sqlite.get_repr_dic(conn)
                df.columns = [repr_dic.get(col, col) for col in df.columns]
                if not df.empty:
                    df1 = df.astype(str)
                    df1.replace({'None': '', 'nan': ''}, inplace=True)
                    # print(df1.to_records(index=False)[0])
                    gb = GridOptionsBuilder.from_dataframe(df1)
                    for col in ['–ü—Ä–æ–µ–∫—Ç', '–ë—Ä–∞–Ω—á', '–¢–∞—Ä–∏—Ñ']:
                        gb.configure_column(col, pinned='left')
                    gb.configure_default_column(filterable=True, sortable=True, value=True)
                    gridOptions = gb.build()
                    AgGrid(df1, height=550, gridOptions=gridOptions,  reload_data=False,
                        enable_enterprise_modules=False, editable=False, allow_unsafe_jscode=True, 
                        theme='streamlit', key=f'product_changes {st.session_state.PRODUCT_CLUSTER_NAME}'
                    )
                    st.markdown(get_table_download_link(
                        df, f'–ß–µ–∫-–ª–∏—Å—Ç {st.session_state.PRODUCT_CLUSTER_NAME}', drop_index=False), 
                        unsafe_allow_html=True)
                    st.markdown('&nbsp;')
                else:
                    st.markdown('''<p style="text-align: center; color: #758586">–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞–ø—É—Å–∫"</p>
                        ''', unsafe_allow_html=True)
        elif st.session_state.table_to_show == '–†–∞—Å—Å—Ä–æ—á–∫–∏':
            with st.spinner(text=f'–§–æ—Ä–º–∏—Ä—É—é —á–µ–∫-–ª–∏—Å—Ç —Å —Ä–∞—Å—Å—Ä–æ—á–∫–∞–º–∏ {st.session_state.PRODUCT_CLUSTER_NAME}...'):
                installments = sqlite.get_this_launch_records(conn, 'INSTALLMENTS', st.session_state.PRODUCT_CLUSTER_NAME, st.session_state.LAUNCH_NAME)
                df = pd.DataFrame.from_records(installments)
                repr_dic = sqlite.get_repr_dic(conn)
                df.columns = [repr_dic.get(col, col) for col in df.columns]
                if not df.empty:
                    df1 = df.astype(str)
                    df1.replace({'None': '', 'nan': ''}, inplace=True)
                    # print(df1.to_records(index=False)[0])
                    gb = GridOptionsBuilder.from_dataframe(df1)
                    for col in ['–ü—Ä–æ–µ–∫—Ç', '–ë—Ä–∞–Ω—á', '–¢–∞—Ä–∏—Ñ', '–¢–∏–ø —Ä–∞—Å—Å—Ä–æ—á–∫–∏', '–°–æ —Å–∫–∏–¥–∫–æ–π/–±–µ–∑ —Å–∫–∏–¥–∫–∏']:
                        gb.configure_column(col, pinned='left')
                    gb.configure_default_column(filterable=True, sortable=True, value=True)
                    gridOptions = gb.build()
                    AgGrid(df1, height=550, gridOptions=gridOptions,  reload_data=False,
                        enable_enterprise_modules=False, editable=False, allow_unsafe_jscode=True, 
                        theme='streamlit', key=f'installments {st.session_state.PRODUCT_CLUSTER_NAME}'
                    )
                    st.markdown(get_table_download_link(
                        df, f'–†–∞—Å—Å—Ä–æ—á–∫–∏ {st.session_state.PRODUCT_CLUSTER_NAME}', drop_index=False), 
                        unsafe_allow_html=True)
                    st.markdown('&nbsp;')
                else:
                    st.markdown('''<p style="text-align: center; color: #758586">–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞–ø—É—Å–∫"</p>
                        ''', unsafe_allow_html=True)


    
        # elif st.session_state.table_to_show == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        #     with st.spinner(text=f'–§–æ—Ä–º–∏—Ä—É—é —á–µ–∫-–ª–∏—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ {st.session_state.PRODUCT_CLUSTER_NAME}...'):
        #         df = get_pce_df(st.session_state.LAUNCH_NAME, st.session_state.PRODUCT_CLUSTER_NAME)
        #         cols_dict = dict()
        #         for col in df.columns:
        #             if '_ID' in col: cols_dict[col] = '{:,.2f}'.format
        #         if not df.empty:
        #             df = df.loc[:,~df.columns.duplicated()]
        #             st.dataframe(df.style.format(formatter=None, na_rep='-'), height=900)
        #             st.markdown(get_table_download_link(
        #                 df, f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {st.session_state.PRODUCT_CLUSTER_NAME}', drop_index=True), 
        #             unsafe_allow_html=True)
        #         else:
        #             st.info('–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞')
        
        elif st.session_state.table_to_show == '–ú–∏–∫—Ä–æ–ø–∞–∫–µ—Ç—ã':
            with st.spinner(text=f'–§–æ—Ä–º–∏—Ä—É—é —á–µ–∫-–ª–∏—Å—Ç —Å –º–∏–∫—Ä–æ–ø–∞–∫–µ—Ç–∞–º–∏ {st.session_state.PRODUCT_CLUSTER_NAME}...'):
                df = get_micro_df(st.session_state.LAUNCH_NAME, st.session_state.PRODUCT_CLUSTER_NAME)
                if not df.empty:
                    df1 = df.astype(str)
                    df1.replace({'None': '', 'nan': ''}, inplace=True)
                    for col in df1.columns:
                        df1[col] = df1[col].str.replace('.0', ' ', regex=False)
                    # print(df1.to_records(index=False)[0])
                    gb = GridOptionsBuilder.from_dataframe(df1)
                    for col in ['LAUNCH_NAME', 'BRANCH_NAME', '–ì—Ä—É–ø–ø–∞']:
                        gb.configure_column(col, pinned='left')
                    gb.configure_default_column(filterable=True, sortable=True, value=True)
                    gridOptions = gb.build()
                    AgGrid(df1, height=550, gridOptions=gridOptions,  reload_data=False,
                        enable_enterprise_modules=False, editable=False, allow_unsafe_jscode=True, 
                        theme='streamlit', key=f'product_micro {st.session_state.PRODUCT_CLUSTER_NAME}'
                    )
                    st.markdown(get_table_download_link(
                        df, f'–ú–∏–∫—Ä–æ–ø–∞–∫–µ—Ç—ã {st.session_state.PRODUCT_CLUSTER_NAME}', drop_index=False), 
                        unsafe_allow_html=True)
                    st.markdown('&nbsp;')
                else:
                    st.info('–ù–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∏–∫—Ä–æ–ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞')
        
        elif st.session_state.table_to_show == '–°–±–æ—Ä–∫–∏':
            with st.spinner(text=f'–§–æ—Ä–º–∏—Ä—É—é —á–µ–∫-–ª–∏—Å—Ç —Å–æ —Å–±–æ—Ä–∫–∞–º–∏ {st.session_state.PRODUCT_CLUSTER_NAME}...'):
                df = get_assemblings_df(st.session_state.LAUNCH_NAME, st.session_state.PRODUCT_CLUSTER_NAME)
                if not df.empty:
                    df1 = df.astype(str)
                    df1.replace({'None': '', 'nan': ''}, inplace=True)
                    for col in df1.columns:
                        df1[col] = df1[col].str.replace('.0', ' ', regex=False)
                    gb = GridOptionsBuilder.from_dataframe(df1)
                    for col in ['LAUNCH_NAME', 'BRANCH_NAME', '–¢–∞—Ä–∏—Ñ']:
                        gb.configure_column(col, pinned='left')
                    gb.configure_default_column(filterable=True, sortable=True, value=True)
                    gridOptions = gb.build()
                    AgGrid(df1, height=550, gridOptions=gridOptions,  reload_data=False,
                        enable_enterprise_modules=False, editable=False, allow_unsafe_jscode=True, 
                        theme='streamlit', key=f'product_assembling {st.session_state.PRODUCT_CLUSTER_NAME}'
                    )
                    st.markdown(get_table_download_link(
                        df, f'–°–±–æ—Ä–∫–∏ {st.session_state.PRODUCT_CLUSTER_NAME}', drop_index=False), 
                        unsafe_allow_html=True)
                    st.markdown('&nbsp;')
                else:
                    st.info('–ù–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–±–æ—Ä–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞')

        show_last_cluster_status()
        if st.session_state.user_rights.get('IS_OWNER') or st.session_state.user_rights.get('IS_TESTER'):
            show_send_cluster_for_setup(st.session_state.PRODUCT_CLUSTER_NAME, st.session_state.LAUNCH_NAME)

    elif st.session_state.main_page_id == '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏':

        def leave_comment():
            comment = st.session_state.comment.replace(' ', '').replace('\n', '')
            if comment:
                sqlite.add_branch_comment(conn, st.session_state)
                st.session_state.comment = ''
        
        
        messages = sqlite.get_messages_by_branch(conn, st.session_state.BRANCH_NAME)
        components.html(
            chat.render_chat(messages),
            height=450, 
            scrolling=True
        )
        st.text_input('–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ', value='', key='comment', on_change=leave_comment)        

    elif st.session_state.main_page_id == '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏':
        st.write('')
        df = get_assemling_params()
        df1 = df.astype(str)
        df1.replace({'None': '', 'nan': ''}, inplace=True)
        gb = GridOptionsBuilder.from_dataframe(df1)
        gb.configure_column('PARAM_VALUE', editable=True, wrapText=True, autoHeight=True)
        gb.configure_column('TARIFF', pinned='left')
        gb.configure_column('ROWID', hide=True)
        gb.configure_default_column(filterable=True, sortable=True, value=True)
        gridOptions = gb.build()
        AgGrid(df1,
            height=550,
            gridOptions=gridOptions, 
            reload_data=False,
            enable_enterprise_modules=False, 
            # editable=True,
            allow_unsafe_jscode=True, 
            fit_columns_on_grid_load=True, 
            # data_return_mode=DataReturnMode.AS_INPUT,
            # update_mode=GridUpdateMode.MODEL_CHANGED,
            theme='streamlit',
            key='Ag_1'
        )
        

        if st.session_state.Ag_1:
            df = df[df['PARAM_1'] == '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è']
            # print(df)
            df1 = pd.DataFrame.from_records(st.session_state.Ag_1['rowData'])
            df1 = df1[df1['PARAM_1'] == '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è']
            # print(df1)
            # print(df1.head())
            # print(df.eq(df1))
            # df_new = pd.concat([df, df1]).drop_duplicates(keep=False).to_dict('records')
            # print(df_new)
            # record = pd.concat([df, df1]).drop_duplicates(keep=False).to_dict('records')[-1]
            # print(record)
            # if record:
            #     upd_assembling_params(record.get('PARAM_VALUE'), record.get('ROWID'))
       
    
    
    elif st.session_state.main_page_id == '–†—ã–Ω–æ–∫ NEW':

        pass
        
        # from menu import component_toggle_buttons

        # if 'counter' not in st.session_state:
        #     st.session_state.counter = 0

        # def run_component(props):
        #     value = component_toggle_buttons(key='toggle_buttons', **props)
        #     return value

        # def handle_event(value):
        #     st.write('Received from component: ', value)


        # st.session_state.counter = st.session_state.counter + 1
        # props = {
        #     'initial_state': {
        #         'group_1_header': 'Choose an option from group 1',
        #         'group_2_header': 'Choose an option from group 2'
        #     },
        #     'counter': st.session_state.counter,
        #     'datetime': str(datetime.now().strftime("%H:%M:%S, %d %b %Y"))
        # }

        # handle_event(run_component(props)) 



def set_up_sidebar(conn, tariff=None, branch=None):

    if st.session_state.user_rights.get('IS_ADMIN'):

        def upd_rights(k):
            st.session_state.user_rights[k] = st.session_state[k]

        with st.expander('–ü—Ä–∞–≤–∞'):
            admin_rights = dict()
            for k, v in st.session_state.user_rights.items():
                if k not in ['IS_ADMIN', 'USERNAME'] and k.startswith('IS_'):
                    admin_rights[k] = v
                    st.checkbox(k, value=v, key=k, on_change=upd_rights, args=(k, ))
                # elif k == 'CLUSTER':
                #     if st.session_state.user_rights.get('IS_INITIATOR'):
                #         options = CLUSTERS
                #         st.selectbox('–ö–ª–∞—Å—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞', options=options, index=0, key=k, on_change=upd_rights, args=(k, ))
                # elif k === 'BFUNCTION':
                #     options = ['(All)'] + CLUSTERS
                #     st.selectbox(k, options=options, index=options.index(v), key=k, on_change=upd_rights, args=(k, ))

   

    def set_up_tariff_form(conn, branch, tariff, launch_name):
        
        dic = sqlite.get_record(conn, branch, tariff, launch_name)
        tar_alias = dic.get('TARIFF_NAME')
        base_tariff = get_base_tariff(tariff)
        base_default_dic = sqlite.get_params_by_default(conn, base_tariff)
        default_dic = sqlite.get_params_by_default(conn, tariff)
        action = dic.get('ACTION')
        st.button('‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è', on_click=cancel_edit)
        st.markdown('&nbsp;')
        tariff_col, copy_from_col = st.columns([4,1])
        with tariff_col:
            show_tariff_branch((tar_alias if tar_alias else tariff), branch)
        if tariff in M16_list and not action:
            init_copy_btn = copy_from_col.button('‚éò', help="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Ç–∞—Ä–∏—Ñ–∞...")
            st.write('')
            if init_copy_btn:
                set_up_copy_tariff()
        st.write('')
            
        
        if st.session_state.TARIFF == '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π':
            fee_type = ''
        else:
            if st.session_state.user_rights.get('IS_TESTER'):
                st.session_state.fee_types = ['–ü–ª–∞–≤–∞—é—â–∏–π –º–µ—Å—è—Ü', '–°—É—Ç–∫–∏', '<–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç>']
            else:
                st.session_state.fee_types = ['–ü–ª–∞–≤–∞—é—â–∏–π –º–µ—Å—è—Ü', '–°—É—Ç–∫–∏']
            fee_type_slot = st.empty()
            if st.session_state.is_tariff_copying:
                fee_type_index = st.session_state.fee_types.index(st.session_state.dic_copy_from['FEE_TYPE'])
            elif dic.get('FEE_TYPE'):
                if dic['FEE_TYPE'] not in st.session_state.fee_types:
                    st.session_state.fee_types.insert(0, dic['FEE_TYPE'])
                fee_type_index = st.session_state.fee_types.index(dic['FEE_TYPE'])
            else:
                fee_type_index = 0
            if action:
                fee_type = dic.get('FEE_TYPE')
                custom_param('–¢–∏–ø –ê–ü', fee_type)
            else:
                fee_type = fee_type_slot.selectbox('–¢–∏–ø –ê–ü', options=st.session_state.fee_types, index=fee_type_index, 
                    help='–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å—Å—Ä–æ—á–∫–∏')
            if fee_type == '<–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç>':
                custom_fee_type = st.number_input(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π –ø–µ—Ä–∏–æ–¥–∞ –ê–ü', key='custom_fee_type', min_value=1, max_value=60, value=1, step=1)
                str_custom_fee_type = f'{str(custom_fee_type)} –¥–Ω'
                st.session_state.FEE_TYPE = str_custom_fee_type   
            else:
                st.session_state.FEE_TYPE = fee_type


        if tariff == '–ë–µ–∑–ª–∏–º–∏—Ç':
            unlim_fee_options = [0, 300, 330, 350, 390, 400, 420, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900,
                                    1000, 1100, 1300]
            if dic['FEE']:
                index = unlim_fee_options.index(dic['FEE'])
            else: index = 0
            if action:
                fee = dic.get('FEE')
                custom_param('–ê–ü', dic.get('FEE'))
            else:
                fee = st.selectbox('–ê–ü', options=unlim_fee_options, index=index)
            fee_after_discount = None
            is_fee_discount = None
            extra = None
            data_gb = 999
            voice_min = 500
            
            cl_min_price = None 
            tele2_calls_unlim = None
            trpl_name = f'{tariff} {fee}'
            is_cbm_change = 0
            is_mdp = 0
            mdp_base = None
            is_ctn_extender = base_default_dic.get('IS_CTN_EXTENDER', 0)
            ctn_extender_price = base_default_dic.get('CTN_EXTENDER_PRICE')
            is_intercity_extender = base_default_dic.get('IS_INTERCITY_EXTENDER', 0)
            intercity_extender_price = base_default_dic.get('INTERCITY_EXTENDER_PRICE')
            is_madagascar = base_default_dic.get('IS_MADAGASCAR',0)
            is_mvideo = base_default_dic.get('IS_MVIDEO', 0)
            is_bombastic = default_dic.get('IS_BOMBASTIC', 0)
            first_month_fee = None
            following_months_fee = None

        elif tariff == 'Premium':
            unlim_fee_options = [1500, 1800]
            if dic['FEE']:
                index = unlim_fee_options.index(dic['FEE'])
            else: 
                index = 0
            if action:
                fee = dic.get('FEE')
                custom_param('–ê–ü', dic.get('FEE'))
            else:
                fee = st.selectbox('–ê–ü', options=unlim_fee_options, index=index)
            fee_after_discount = None
            is_fee_discount = None
            extra = None
            data_gb = 60
            voice_min = 2000

            voice_min_col, data_gb_col = st.columns(2)
            with voice_min_col:
                custom_param('–ü–∞–∫–µ—Ç –º–∏–Ω—É—Ç', voice_min)
            with data_gb_col:
                custom_param('–ü–∞–∫–µ—Ç –ì–±', data_gb)
            st.write('')

            is_installment = 0
            cl_min_price = None 
            tele2_calls_unlim = None
            trpl_name = f'{tariff} {fee}'
            is_cbm_change = 0
            is_mdp = 0
            mdp_base = None
            is_inst_mdp = 0
            # inst_mdp_type = None
            is_ctn_extender = base_default_dic.get('IS_CTN_EXTENDER', 0)
            ctn_extender_price = base_default_dic.get('CTN_EXTENDER_PRICE')
            is_intercity_extender = base_default_dic.get('IS_INTERCITY_EXTENDER', 0)
            intercity_extender_price = base_default_dic.get('INTERCITY_EXTENDER_PRICE')
            is_madagascar = base_default_dic.get('IS_MADAGASCAR',0)
            is_mvideo = base_default_dic.get('IS_MVIDEO', 0)
            is_bombastic = default_dic.get('IS_BOMBASTIC', 0)
            first_month_fee = None
            following_months_fee = None

        elif tariff == '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π':
            fee = None
            is_fee_discount = None
            price_versions = ['v. 0.3', 'v. 0.4', 'v. 0.5', 'v. 0.6', 'v. 0.7', 'v. 0.8', 'v. 0.9', 'v. 1',
                                'v. 1.1', 'v. 1.2', 'v. 1.3', 'v. 1.4', 'v. 1.5', 'v. 1.6', 'v. 1.7', 'v. 1.8', 'v. 1.9',
                                'v. 2', 'v. 2.5', 'v. 3', 'v. 4']
            if dic['CLASSIC_MINUTE_PRICE']:
                index = price_versions.index(dic.get('CLASSIC_MINUTE_PRICE'))
            else: 
                index = 0
            cl_min_price = st.selectbox('–°—Ç–æ–∏–º–æ—Å—Ç—å –º–∏–Ω—É—Ç—ã –Ω–∞ –¢–ü –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', options=price_versions, index=index)
            unlim_versions = ['–ù–µ—Ç', '(–ü–î) –ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ Tele2 v.1', '(–ü–î) –ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ Tele2 v.2',
                                '(–ü–î) –ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ Tele2 v.3', '(–ü–î) –ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ Tele2 v.4', '(–ü–î) –ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ Tele2 v.5']
            if dic['CLASSIC_MINUTE_PRICE']:
                index = unlim_versions.index(dic.get('TELE2_CALLS_UNLIM'))
            else: index = 0
            tele2_calls_unlim = st.selectbox('–ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ Tele2', options=unlim_versions, index=index)
            fee = None
            fee_after_discount = None
            extra = None
            data_gb = None
            voice_min = None
            is_installment = 0
            trpl_name = f'{tariff} {cl_min_price}'
            is_cbm_change = 0
            is_mdp = 0
            mdp_base = None
            is_inst_mdp = 0
            # inst_mdp_type = None
            is_ctn_extender = base_default_dic.get('IS_CTN_EXTENDER', 0)
            ctn_extender_price = base_default_dic.get('CTN_EXTENDER_PRICE')
            is_intercity_extender = base_default_dic.get('IS_INTERCITY_EXTENDER', 0)
            intercity_extender_price = base_default_dic.get('INTERCITY_EXTENDER_PRICE')
            is_madagascar = base_default_dic.get('IS_MADAGASCAR',0)
            is_mvideo = base_default_dic.get('IS_MVIDEO', 0)
            is_bombastic = default_dic.get('IS_BOMBASTIC', 0)
            first_month_fee = None
            following_months_fee = None

        elif tariff != '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π' and tariff != '–ë–µ–∑–ª–∏–º–∏—Ç':
 
            if st.session_state.is_tariff_copying:
                fee_value = int(st.session_state.dic_copy_from['FEE'])
            elif tariff in FEE_CONDITION_TARIFFS:
                fee_dict = dict()
                for tar in FEE_CONDITION_TARIFFS:
                    if tar == tariff:
                        fee_dict[tar] = dic['FEE'] if dic['FEE'] else 0
                    else:
                        rec = sqlite.get_record(conn, branch, tar, launch_name)
                        fee_dict[tar] = rec.get('FEE') if rec.get('FEE') else 0
                if not dic['FEE'] and sum([x != 0 for x in fee_dict.values()]) == 3:
                    fee_diff = (fee_dict['–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 1'] + fee_dict['–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 2']) - (fee_dict['–ú–æ–π –æ–Ω–ª–∞–π–Ω+'] + fee_dict['–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 3'])
                else:
                    fee_diff = int(dic['FEE'] if dic['FEE'] else 0)
                fee_value = int(abs(fee_diff))
            else:
                fee_value = int(dic['FEE'] if dic['FEE'] else 0)
            
            if action:
                fee = dic.get('FEE')
                custom_param('–ê–ü', fee)
            else:
                fee = st.number_input('–ê–ü', min_value=0, max_value=10000, step=10, value=fee_value)
            
            if tariff in FEE_CONDITION_TARIFFS:
                fee_dict[tariff] = fee
                if sum([x != 0 for x in fee_dict.values()]) == 4:
                    fee_diff = (fee_dict['–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 1'] + fee_dict['–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 2']) - (fee_dict['–ú–æ–π –æ–Ω–ª–∞–π–Ω+'] + fee_dict['–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 3'])
                    if fee_diff != 0:
                        st.error(f'–£—Å–ª–æ–≤–∏–µ –ø–æ —Å—É–º–º–µ –¥–æ–∫—É–ø–æ–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!')
                        st.info(f'''–î–æ–∫—É–ø–∫–∞ –¥–æ –°—É–ø–µ—Ä –û–Ω–ª–∞–π–Ω+ 3 {'–º–µ–Ω—å—à–µ' if fee_diff > 0 else '–±–æ–ª—å—à–µ'}
                            —Å—É–º–º—ã –¥–æ–∫—É–ø–æ–∫ –º–ª–∞–¥—à–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ {abs(int(fee_diff))} —Ä—É–±''')
                    else:
                        st.info(f'–£—Å–ª–æ–≤–∏–µ –ø–æ —Å—É–º–º–µ –¥–æ–∫—É–ø–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')


            if st.session_state.is_tariff_copying:
                is_fee_discount_value = st.session_state.dic_copy_from['IS_FEE_DISCOUNT']
            elif fee != dic['FEE']:
                is_fee_discount_value = False
            else:
                is_fee_discount_value = (dic['IS_FEE_DISCOUNT'] if dic['IS_FEE_DISCOUNT'] else False)
            is_fee_discount = st.checkbox('–ï—Å—Ç—å —Å–∫–∏–¥–∫–∞ –Ω–∞ –ê–ü', value=is_fee_discount_value)

            if is_fee_discount:
                if st.session_state.is_tariff_copying:
                    fee_after_discount_value = st.session_state.dic_copy_from['FEE_AFTER_DISCOUNT']
                elif dic.get('FEE_AFTER_DISCOUNT'):
                    fee_after_discount_value = dic.get('FEE_AFTER_DISCOUNT')
                else:
                    fee_after_discount_value = 0
                fee_after_discount = st.number_input('–ê–ü —Å–æ —Å–∫–∏–¥–∫–æ–π', min_value=0, max_value=int(fee),
                    step=10, value=fee_after_discount_value
                )
            else:
                fee_after_discount = None

            if 'custom_extra_input' not in st.session_state:
                st.session_state.custom_extra_input = False

            if not st.session_state.custom_extra_input:
                if st.session_state.is_tariff_copying:
                    extra_index = st.session_state.extras.index(st.session_state.dic_copy_from['EXTRA'])
                elif dic.get('EXTRA'):
                    if dic['EXTRA'] not in st.session_state.extras:
                        st.session_state.extras.insert(0, dic['EXTRA'])
                    extra_index = st.session_state.extras.index(dic['EXTRA'])
                else: 
                    extra_index = 0
                if action:
                    extra = dic.get('EXTRA')
                    custom_param('–î–æ–ø –ø–∞–∫–µ—Ç—ã –∏ —É–¥–≤–æ–µ–Ω–∏—è', extra)
                else:
                    extra = st.selectbox('–î–æ–ø –ø–∞–∫–µ—Ç—ã –∏ —É–¥–≤–æ–µ–Ω–∏—è', options=st.session_state.extras, index=extra_index)
                if extra == st.session_state.extras[-1]:
                    st.session_state.custom_extra_input = True
                    st.experimental_rerun()
            else:
                extra = None
                with st.expander(label='–î–æ–ø –ø–∞–∫–µ—Ç—ã –∏ —É–¥–≤–æ–µ–Ω–∏—è', expanded=True):
                    custom_extra = st.text_input(f'–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç',
                        value=dic.get('CUSTOM_EXTRA',''), key='CUSTOM_EXTRA')
                    cols = st.columns(3)
                    cancel_custom_extra = cols[1].button('–û—Ç–º–µ–Ω–∞')
                if cancel_custom_extra:
                    st.session_state.custom_extra_input = False
                    st.experimental_rerun()
                st.markdown('&nbsp;')
                if custom_extra:
                    st.session_state.extras.insert(0, custom_extra)
                    st.session_state.custom_extra_input = False
                    st.experimental_rerun()


            # –ü–ê–ö–ï–¢–´ DATA & VOICE
            voice_min_col, data_gb_col = st.columns(2)

            with voice_min_col:
                if action:
                    voice_min = dic.get('VOICE_MIN')
                    custom_param('–ü–∞–∫–µ—Ç –º–∏–Ω—É—Ç', voice_min)
                elif tariff == base_tariff or tariff == '–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 3':
                    if st.session_state.is_tariff_copying:
                        voice_min_index = voice_min_options.index(st.session_state.dic_copy_from['VOICE_MIN'])
                    elif dic['VOICE_MIN']:
                        voice_min_index = voice_min_options.index(dic['VOICE_MIN'])
                    else: 
                        voice_min_index = 0
                    voice_min = voice_min_col.selectbox('–ü–∞–∫–µ—Ç –º–∏–Ω—É—Ç', options=voice_min_options, index=voice_min_index)
                else:  
                    for tar in st.session_state.actual_tariffs:
                        if check_one_column(st.session_state.TARIFF, tar):
                            rec = sqlite.get_record(conn, branch, tar, launch_name)
                            voice_min = rec.get('VOICE_MIN')
                            custom_param('–ü–∞–∫–µ—Ç –º–∏–Ω—É—Ç', voice_min)
                            break
                    else:
                        if st.session_state.is_tariff_copying:
                            voice_min_index = voice_min_options.index(st.session_state.dic_copy_from['VOICE_MIN'])
                        elif dic['VOICE_MIN']:
                            voice_min_index = voice_min_options.index(dic['VOICE_MIN'])
                        else: 
                            voice_min_index = 0
                        voice_min = voice_min_col.selectbox('–ü–∞–∫–µ—Ç –º–∏–Ω—É—Ç', options=voice_min_options, index=voice_min_index)

            with data_gb_col:
                if action:
                    data_gb = dic.get('DATA_GB')
                    custom_param('–ü–∞–∫–µ—Ç –ì–±', data_gb)
                elif tariff == base_tariff or tariff == '–°—É–ø–µ—Ä –æ–Ω–ª–∞–π–Ω+ 3':
                    if st.session_state.is_tariff_copying:
                        data_gb_index = data_gb_options.index(st.session_state.dic_copy_from['DATA_GB'])
                    elif dic['DATA_GB']:
                        data_gb_index = data_gb_options.index(dic['DATA_GB'])
                    else: 
                        data_gb_index = 0
                    data_gb = data_gb_col.selectbox('–ü–∞–∫–µ—Ç –ì–±', options=data_gb_options, index=data_gb_index)
                else:
                    for tar in st.session_state.actual_tariffs:
                        if check_one_row(st.session_state.TARIFF, tar):
                            rec = sqlite.get_record(conn, branch, tar, launch_name)
                            data_gb = rec['DATA_GB']
                            custom_param('–ü–∞–∫–µ—Ç –ì–±', data_gb)
                            break
                    else:
                        if st.session_state.is_tariff_copying:
                            data_gb_index = data_gb_options.index(st.session_state.dic_copy_from['DATA_GB'])
                        elif dic['DATA_GB']:
                            data_gb_index = data_gb_options.index(dic['DATA_GB'])
                        else: 
                            data_gb_index = 0
                        data_gb = data_gb_col.selectbox('–ü–∞–∫–µ—Ç –ì–±', options=data_gb_options, index=data_gb_index)
                        
            st.write('')
    
            if st.session_state.user_rights.get('IS_OWNER'):
                is_ctn_extender_value = dic.get('IS_CTN_EXTENDER', 0)
                is_ctn_extender = st.checkbox('–ü–∞–∫–µ—Ç –ì–±', value=is_ctn_extender_value)
            else:
                is_ctn_extender = base_default_dic.get('IS_CTN_EXTENDER', 0)
                custom_checkbox('–ü–∞–∫–µ—Ç –ì–±', is_ctn_extender)
            if is_ctn_extender:
                ctn_extender_price = base_default_dic.get('CTN_EXTENDER_PRICE')
                custom_param('–¶–µ–Ω–∞ —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—è –ì–¢–°', int(ctn_extender_price))
            else:
                ctn_extender_price = None
            
            if st.session_state.user_rights.get('IS_TESTER'):
                is_intercity_extender_value = dic.get('IS_INTERCITY_EXTENDER', 0)
                is_intercity_extender = st.checkbox('–ù—É–∂–µ–Ω —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å –ú–ì', value=is_intercity_extender_value)
            else:
                is_intercity_extender = base_default_dic.get('IS_INTERCITY_EXTENDER', 0)
                custom_checkbox('–ù—É–∂–µ–Ω —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å –ú–ì', is_intercity_extender)
            if is_intercity_extender:
                if tariff == '–ú–æ–π –æ–Ω–ª–∞–π–Ω':
                    mo_fee = fee
                    mo_plus_fee = sqlite.get_record(conn, branch, '–ú–æ–π –æ–Ω–ª–∞–π–Ω+', launch_name).get('FEE')
                    if mo_plus_fee:
                        if mo_fee:
                            intercity_extender_price = mo_plus_fee - mo_fee
                            if intercity_extender_price <= 50:
                                intercity_extender_price = 50
                            elif intercity_extender_price <= 100:
                                intercity_extender_price = 100
                            elif intercity_extender_price <= 150:
                                intercity_extender_price = 150
                            else:
                                intercity_extender_price = 200
                        else:
                            intercity_extender_price = None
                            st.info('–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –Ω–∞ —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å –ú–ì —Å–ø–µ—Ä–≤–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ê–ü') 
                            return
                    else:
                        intercity_extender_price = None
                        st.info('–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –Ω–∞ —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å –ú–ì —Å–ø–µ—Ä–≤–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ú–æ–π –æ–Ω–ª–∞–π–Ω+')
                        return
                elif base_tariff != tariff and base_tariff == '–ú–æ–π –æ–Ω–ª–∞–π–Ω':
                    intercity_extender_price = sqlite.get_record(conn, branch, base_tariff, launch_name).get('INTERCITY_EXTENDER_PRICE')
                    if not intercity_extender_price:
                        st.info('–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –Ω–∞ —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å –ú–ì —Å–ø–µ—Ä–≤–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ú–æ–π –æ–Ω–ª–∞–π–Ω')
                        return
                else:
                    intercity_extender_price = base_default_dic.get('INTERCITY_EXTENDER_PRICE')
                if intercity_extender_price:
                    custom_param('–¶–µ–Ω–∞ —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—è –ú–ì', int(intercity_extender_price))
            else:
                intercity_extender_price = None


            is_madagascar_label = '–ù—É–∂–µ–Ω T&B –ú–∞–¥–∞–≥–∞—Å–∫–∞—Ä (14 –¥–Ω–µ–π)'
            if st.session_state.user_rights.get('IS_TESTER'):
                is_madagascar_value = dic.get('IS_MADAGASCAR', 0)
                is_madagascar = st.checkbox(is_madagascar_label, value=is_madagascar_value)
            else:
                if base_tariff == tariff:
                    is_madagascar = default_dic.get('IS_MADAGASCAR',0)
                    custom_checkbox(is_madagascar_label, is_madagascar)
                else:
                    if base_default_dic.get('IS_MADAGASCAR', 0):
                        if st.session_state.is_tariff_copying:
                            is_madagascar_value = st.session_state.dic_copy_from['IS_MADAGASCAR']
                        else: 
                            is_madagascar_value = dic.get('IS_MADAGASCAR', 0)
                        is_madagascar = st.checkbox(is_madagascar_label, value=is_madagascar_value)
                    else:
                        is_madagascar = 0
                        custom_checkbox(is_madagascar_label, is_madagascar) 


            is_mvideo_label = '–ù—É–∂–µ–Ω T&B –ú–í–∏–¥–µ–æ (7 –¥–Ω–µ–π)'
            if st.session_state.user_rights.get('IS_TESTER'):
                is_mvideo_value = dic.get('IS_MVIDEO', 0)
                is_mvideo = st.checkbox(is_mvideo_label, value=is_mvideo_value)
            else:
                if base_tariff == tariff:
                    is_mvideo = default_dic.get('IS_MVIDEO',0)
                    custom_checkbox(is_mvideo_label, is_mvideo)
                else:
                    if base_default_dic.get('IS_MVIDEO', 0):
                        if st.session_state.is_tariff_copying:
                            is_mvideo_value = st.session_state.dic_copy_from['IS_MVIDEO']
                        else: 
                            is_mvideo_value = dic.get('IS_MVIDEO', 0)
                        is_mvideo = st.checkbox(is_mvideo_label, value=is_mvideo_value)
                    else:
                        is_mvideo = 0
                        custom_checkbox(is_mvideo_label, is_mvideo)
            

            is_bombastic_label = '–ù—É–∂–Ω—ã –ë–æ–º–±–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã'
            if st.session_state.user_rights.get('IS_TESTER'):
                is_bombastic_value = dic.get('IS_BOMBASTIC', 0)
                is_bombastic = st.checkbox(is_bombastic_label, value=is_bombastic_value)
            else:
                if base_tariff == tariff:
                    is_bombastic = default_dic.get('IS_BOMBASTIC', 0)
                    custom_checkbox(is_bombastic_label, is_bombastic)
                else:
                    if base_default_dic.get('IS_BOMBASTIC', 0):
                        if st.session_state.is_tariff_copying:
                            is_bombastic_value = st.session_state.dic_copy_from['IS_BOMBASTIC']
                        else: 
                            is_bombastic_value = dic.get('IS_BOMBASTIC', 0)
                        is_bombastic = st.checkbox(is_bombastic_label, value=is_bombastic_value)
                    else:
                        is_bombastic = 0
                        custom_checkbox(is_bombastic_label, is_bombastic)


            if st.session_state.is_tariff_copying:
                is_cbm_change_value = st.session_state.dic_copy_from['IS_CBM_CHANGE']
            else: 
                is_cbm_change_value = dic.get('IS_CBM_CHANGE', 0)
            is_cbm_change = st.checkbox('–ù—É–∂–Ω–∞ —Å–º–µ–Ω–∞ –Ω–∞ –∞–∫—Ü–∏–æ–Ω–Ω—ã–µ', value=is_cbm_change_value)
            

            if is_cbm_change:
                if is_fee_discount:
                    first_month_fee = st.selectbox('–ê–ü –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü', [fee, fee_after_discount])
                    following_months_fee = fee_after_discount
                    custom_param('–ê–ü —Å–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞', following_months_fee)   
                else:
                    first_month_fee = fee
                    following_months_fee = fee
                    custom_param('–ê–ü –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü', first_month_fee)
                    custom_param('–ê–ü —Å–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞', following_months_fee)
            else:
                first_month_fee = None
                following_months_fee = None

            if st.session_state.is_tariff_copying:
                is_mdp_value = st.session_state.dic_copy_from['IS_MDP']
            else: 
                is_mdp_value = dic.get('IS_MDP', 0)
            is_mdp = st.checkbox('–ù—É–∂–µ–Ω –ú–ê–ü', value=is_mdp_value)
            if is_mdp:
                if is_fee_discount:
                    mdp_base_type_value = dic.get('MDP_BASE', 0)
                    if mdp_base_type_value == fee:
                        mdp_base_type_index = 0
                    else:
                        mdp_base_type_index = 1
                    mdp_base_type = st.radio('–ú–ê–ü –≤ —Ä–∞–∑–º–µ—Ä–µ', options=['–ê–ü', '–ê–ü —Å–æ —Å–∫–∏–¥–∫–æ–π'], index=mdp_base_type_index)
                    if mdp_base_type == '–ê–ü':
                        mdp_base = fee
                    elif mdp_base_type == '–ê–ü —Å–æ —Å–∫–∏–¥–∫–æ–π':
                        mdp_base = fee_after_discount
                    else:
                        mdp_base = None
                    st.write('')
                else:
                    mdp_base = fee
            else:
                mdp_base = None
            cl_min_price = None 
            tele2_calls_unlim = None
            trpl_name = f'{tariff} ({branch})'


            if st.session_state.user_rights.get('IS_TESTER'):
                is_installment_value = dic.get('IS_INSTALLMENT', 0)
                is_installment = st.checkbox('–ù—É–∂–Ω–∞ —Ä–∞—Å—Å—Ä–æ—á–∫–∞', value=is_installment_value)
            else:
                if base_tariff != tariff:
                    if st.session_state.is_tariff_copying:
                        is_installment_value = st.session_state.dic_copy_from.get('IS_INSTALLMENT', 0)
                    else: 
                        is_installment_value = dic.get('IS_INSTALLMENT', 0)
                    is_installment = st.checkbox('–ù—É–∂–Ω–∞ —Ä–∞—Å—Å—Ä–æ—á–∫–∞', value=is_installment_value)
                else:
                    is_installment = base_default_dic.get('IS_INSTALLMENT', 0)
                    custom_checkbox('–ù—É–∂–Ω–∞ —Ä–∞—Å—Å—Ä–æ—á–∫–∞', is_installment)
        
            if is_installment:
                inst_periods = (dic.get('INSTALLMENT_PERIODS') if dic.get('INSTALLMENT_PERIODS') else '5,10,15')
                default_list = [int(per) for per in inst_periods.split(',')]
                if st.session_state.user_rights.get('IS_TESTER'):
                    st.multiselect('–¢–∏–ø—ã —Ä–∞—Å—Å—Ä–æ—á–µ–∫', key='sel_inst_periods',
                        options=set(st.session_state.inst_periods + default_list),
                        default=sorted(default_list)
                    )
                else:
                    st.session_state.sel_inst_periods = default_list
                installment_periods = ','.join(str(inst) for inst in st.session_state.sel_inst_periods)
                if not st.session_state.sel_inst_periods:
                    st.error('–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Ä–∞—Å—Å—Ä–æ—á–∫–∏')
                is_inst_mdp_value = dic.get('IS_INST_MDP', 0)
                is_inst_mdp = st.checkbox('–ù—É–∂–µ–Ω –ú–ê–ü –Ω–∞ —Ä–∞—Å—Å—Ä–æ—á–∫—É', value=is_inst_mdp_value)
                if is_inst_mdp:
                    inst_mdp_base_options = [100, 150, 200]
                    inst_mdp_base_value = dic.get('INST_MDP_BASE')
                    if inst_mdp_base_value:
                        if inst_mdp_base_value not in inst_mdp_base_options:
                            inst_mdp_base_options.append(inst_mdp_base_value)
                        inst_mdp_base_index = inst_mdp_base_options.index(inst_mdp_base_value)
                    else:
                        inst_mdp_base_index = 0
                    inst_mdp_base = st.selectbox('–ë–∞–∑–∞ –¥–ª—è –ú–ê–ü', options=inst_mdp_base_options, index=inst_mdp_base_index)
                else:
                    inst_mdp_base = None
            else:
                installment_periods = None
                is_inst_mdp = 0
                inst_mdp_base = None
            st.session_state['INSTALLMENT_PERIODS'] = installment_periods
            st.session_state['IS_INST_MDP'] = is_inst_mdp
            st.session_state['INST_MDP_BASE'] = inst_mdp_base
        if 'IS_INST_MDP' not in st.session_state: st.session_state['IS_INST_MDP'] = 0


        sms = base_default_dic.get('SMS', 0)
        if sms:
            st.session_state.SMS = sms
        else:
            st.session_state.SMS = 0
        if st.session_state.SMS > 0:
            sms_directions = ['–ø–æ —Ä–µ–≥–∏–æ–Ω—É', '–ø–æ –†–æ—Å—Å–∏–∏']
            if tariff not in ['–ë–µ–∑–ª–∏–º–∏—Ç', '–í–µ–∑–¥–µ –æ–Ω–ª–∞–π–Ω', 'Premium']:
                if dic.get('SMS_DIRECTION'):
                    sms_dir_index = sms_directions.index(dic.get('SMS_DIRECTION', sms_directions[0]))
                else:
                    sms_dir_index = 0
                sms_dir = st.radio('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ SMS', options=sms_directions, index=sms_dir_index)
                st.session_state['SMS_DIRECTION'] = sms_dir
                
        if tariff == '–ë–µ–∑–ª–∏–º–∏—Ç':
            extra_sms = default_dic.get('EXTRA_SMS')
            custom_param('–î–æ–ø –ø–∞–∫–µ—Ç SMS', extra_sms)  
            extra_min = default_dic.get('EXTRA_MIN')
            custom_param('–î–æ–ø –ø–∞–∫–µ—Ç –º–∏–Ω—É—Ç', extra_min) 
        else:
            extra_sms = None 
            extra_min = None
        extra_gb = None

        if st.session_state.is_tariff_copying:
            regional_value = st.session_state.dic_copy_from.get('REGIONAL', '')
        else: 
            regional_value = dic.get('REGIONAL', '')
        if not regional_value: regional_value = ''
        
        regional = dic.get('REGIONAL')
        if 'all_reg' not in st.session_state:
            if regional:
                st.session_state.all_reg = regional.split("; ")
            else:
                st.session_state.all_reg = []

        def add_reg():
            if 'reg_to_add' in st.session_state:
                if st.session_state.reg_to_add != '<–í—ã–±–µ—Ä–∏—Ç–µ TFS>':
                    st.session_state.all_reg.append(st.session_state.reg_to_add)

        def del_reg(reg):
            if reg in st.session_state.all_reg:
                st.session_state.all_reg.remove(reg)

        st.write('')
        st.header('–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏')
        if not st.session_state.all_reg:
            st.caption('–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞')
            regional = ''
        else:    
            for reg in st.session_state.all_reg:
                with st.form(f'{reg}'):
                    st.write('')  
                    cols = st.columns([5, 1, 0.2])
                    cols[0].markdown(f'''<p style="overflow: hidden; font-size: 1vw; font_weight: bold;
                        margin-bottom: 5px;">{reg}</p>''', unsafe_allow_html=True)
                    cols[1].form_submit_button('‚ùå', on_click=del_reg, args=(reg, ), help='–£–¥–∞–ª–∏—Ç—å')
                    st.write('')
            regional = '; '.join(st.session_state.all_reg)
        st.write('')
        
        search = st.text_input('–ü–æ–∏—Å–∫ –ø–æ TFS', key='search_text')
        wit_list = []
        if search:
            if 'tfs_session' not in st.session_state:
                st.session_state.tfs_session = create_tfs_session()
            try:
                work_items = get_work_items(st.session_state.tfs_session, st.session_state.search_text)
            except Exception as e:
                print(e)
                st.error('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
            else:
                if not work_items:
                    st.info('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å')
                else:
                    if len(work_items) > 30:
                        st.info('–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å')
                    else:
                        wit_list = ['<–í—ã–±–µ—Ä–∏—Ç–µ TFS>'] + [f"{item['WorkItemId']} {item['Title']}" for item in work_items]
                        wit_list = [wit for wit in wit_list if wit not in st.session_state.all_reg]
                        st.selectbox(label='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞', help='–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å',
                            options=wit_list, key='reg_to_add', on_change=add_reg) 

        if st.session_state.is_tariff_copying:
            comments_value = st.session_state.dic_copy_from.get('COMMENTS', '')
        else: 
            comments_value = dic.get('COMMENTS', '')
        if not comments_value: comments_value = ''
        
        comments = st.text_area('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
            value=comments_value, 
            max_chars=512,
            help='–ü—Ä–∏–º–µ—Ä: –ú–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∑–∞ 0 —Ä—É–±'
        )

        if is_fee_discount and tariff != base_tariff:
            base_rec = sqlite.get_record(conn, branch, base_tariff, launch_name)
            if fee_after_discount == base_rec.get('FEE'):
                discount_type = '–°–∫–∏–¥–∫–∞ 100% –Ω–∞ –º–∏–∫—Ä–æ'
            else:
                discount_type = '–°–∫–∏–¥–∫–∞ –Ω–∞ –û–¢–£ –∏ –º–∏–∫—Ä–æ'
        else:
            discount_type = None

        st.session_state['DISCOUNT_TYPE'] = discount_type
        st.session_state['IS_INSTALLMENT'] = is_installment
        st.session_state['IS_CBM_CHANGE'] = is_cbm_change
        st.session_state['IS_MDP'] = is_mdp
        st.session_state['MDP_BASE'] = mdp_base
        st.session_state['EXTRA'] = extra
        st.session_state['EXTRA_SMS'] = extra_sms
        st.session_state['EXTRA_MIN'] = extra_min
        st.session_state['EXTRA_GB'] = extra_gb
        st.session_state['REGIONAL'] = regional
        st.session_state['FEE'] = fee
        st.session_state['IS_FEE_DISCOUNT'] = is_fee_discount
        st.session_state['FEE_AFTER_DISCOUNT'] = fee_after_discount
        st.session_state['DATA_GB'] = data_gb
        st.session_state['VOICE_MIN'] = voice_min
        st.session_state['INTERCITY_INCLUDED'] = base_default_dic.get('INTERCITY_INCLUDED', '–ù–µ—Ç')
        st.session_state['IS_INTERCITY_EXTENDER'] = is_intercity_extender
        st.session_state['INTERCITY_EXTENDER_PRICE'] = intercity_extender_price
        st.session_state['CLASSIC_MINUTE_PRICE'] = cl_min_price
        st.session_state['TELE2_CALLS_UNLIM'] = tele2_calls_unlim      
        st.session_state['TRPL_NAME'] = trpl_name
        st.session_state['IS_CTN_EXTENDER'] = is_ctn_extender
        st.session_state['CTN_EXTENDER_PRICE'] = ctn_extender_price
        st.session_state['IS_BOMBASTIC'] = is_bombastic
        st.session_state['FIRST_MONTH_FEE'] = first_month_fee
        st.session_state['FOLLOWING_MONTHS_FEE'] = following_months_fee
        st.session_state['ACTION'] = action
        st.session_state['IS_MADAGASCAR'] = is_madagascar
        st.session_state['COMMENTS'] = comments
        
        
        if is_madagascar:
            st.session_state.MADAGASCAR_FEE = 0
            if voice_min:
                st.session_state.MADAGASCAR_MIN = voice_min/2
            if data_gb:
                st.session_state.MADAGASCAR_GB = data_gb/2
        else:
            st.session_state.MADAGASCAR_FEE = None
            st.session_state.MADAGASCAR_MIN = None
            st.session_state.MADAGASCAR_GB = None


        st.session_state.IS_MVIDEO = is_mvideo
        if is_mvideo:
            st.session_state.MVIDEO_FEE = 0
            if voice_min:
                st.session_state.MVIDEO_MIN = voice_min
            if data_gb:
                st.session_state.MVIDEO_GB = data_gb
        else:
            st.session_state.MVIDEO_FEE = None
            st.session_state.MVIDEO_MIN = None
            st.session_state.MVIDEO_GB = None


        st.session_state.IS_BOMBASTIC = is_bombastic
        if is_bombastic:
            if fee_after_discount:
                st.session_state.BOMBASTIC_PRICE = fee_after_discount * 3
            else:
                st.session_state.BOMBASTIC_PRICE = fee * 3
        else:
            st.session_state.BOMBASTIC_PRICE = None



        st.write('')
        error_slot = st.empty()
        
        if not st.session_state.is_editing_allowed:
            st.info('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞')
        else:
            if tariff in st.session_state.actual_tariffs: 
                cols = st.columns(2)
                add_btn = cols[0].button('–û–±–Ω–æ–≤–∏—Ç—å')
                del_btn = cols[1].button('–£–¥–∞–ª–∏—Ç—å')    
            else:
                add_btn = st.button('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')
                del_btn = None

            if del_btn:
                sqlite.delete_record(conn,
                    st.session_state.LAUNCH_NAME,
                    st.session_state.BRANCH_NAME,
                    tariff
                )

                if st.session_state.branch_status == 'rejected' or not st.session_state.branch_status:
                    sqlite.add_branch_status(conn, st.session_state, status='editing')
                st.session_state.TARIFF = None
                st.session_state.dic_copy_from = None
                st.session_state.is_tariff_copying = False
                st.session_state.main_page_id = '–ó–∞–ø—É—Å–∫'
                st.experimental_rerun()

            if add_btn:
                if tariff != '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π' and (data_gb == 0 or voice_min == 0):
                    error_slot.error('–ù—É–ª–µ–≤—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º—ã')
                elif fee == 0:
                    error_slot.error('–ê–ü –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤–æ–π')
                elif is_fee_discount and fee_after_discount == 0:
                    error_slot.error('–ê–ü —Å–æ —Å–∫–∏–¥–∫–æ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤–æ–π')
                else:
                    check_dict = check_if_accept_changes(st.session_state.BRANCH_NAME)
                    if all(check_dict.values()):
                        sqlite.add_record(conn, st.session_state)
                        if st.session_state.branch_status == 'rejected' or not st.session_state.branch_status:
                            sqlite.add_branch_status(conn, st.session_state, status='editing')
                        if tariff == '–ú–æ–π –æ–Ω–ª–∞–π–Ω+':
                            mo_dict = sqlite.get_record(conn, branch, '–ú–æ–π –æ–Ω–ª–∞–π–Ω', launch_name)
                            mo_fee = mo_dict.get('FEE')
                            mo_plus_fee = fee
                            if mo_fee and mo_plus_fee:
                                mo_dict['INTERCITY_EXTENDER_PRICE'] = mo_plus_fee - mo_fee
                                sqlite.add_record(conn, mo_dict)
                            else:
                                pass
                        for tar in st.session_state.actual_tariffs:
                            if tar != tariff:
                                if check_one_row(tariff, tar):
                                    rec = sqlite.get_record(conn, branch, tar, launch_name)
                                    rec.update({'DATA_GB':st.session_state.DATA_GB})
                                    sqlite.add_record(conn, rec)
                                elif check_one_column(tariff, tar):
                                    rec = sqlite.get_record(conn, branch, tar, launch_name)
                                    rec.update({'VOICE_MIN':st.session_state.VOICE_MIN})
                                    sqlite.add_record(conn, rec)
                        st.session_state.TARIFF = None
                        st.session_state.dic_copy_from = None
                        st.session_state.is_tariff_copying = False
                        st.session_state.main_page_id = '–ó–∞–ø—É—Å–∫'
                        st.experimental_rerun()
                    else:
                        for metric, accept_bool in check_dict.items():
                            if not accept_bool:
                                error_slot.error(f"{st.session_state.repr_dic.get(metric)} –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –º–∞—Ç—Ä–∏—Ü—ã")


    def copy_tariff():
        st.session_state.dic_copy_from = sqlite.get_record(conn,
            st.session_state.BRANCH_NAME, 
            st.session_state.tar_copy_from, 
            st.session_state.LAUNCH_NAME
        )
        st.session_state.is_tariff_copying = True
        # st.experimental_rerun()


    def set_up_copy_tariff():
        tars_to_copy_from = [t for t in st.session_state.actual_tariffs if t != st.session_state.TARIFF and t in M16_list]
        st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ', options=tars_to_copy_from, key='tar_copy_from')
        cols = st.columns(2)
        if tars_to_copy_from:
            cols[0].button('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', on_click=copy_tariff)
        cols[1].button('–û—Ç–º–µ–Ω–∏—Ç—å')


    # _, image_col, _ = st.columns([1, 1, 1])
    # image_col.image('Tele2-PLM-logo.png', width=115)
    # st.markdown('&nbsp;')

    #   –ï–°–õ–ò –í–´–ë–†–ê–ù –¢–ê–†–ò–§, –†–ò–°–£–ï–ú –¢–ê–†–ò–§–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
    def set_up_copy_branch():
        
        def copy_branch():
            branch_to = st.session_state.BRANCH_NAME
            branch_from = st.session_state.branch_to_copy_from
            sqlite.duplicate_branch(conn, 
                st.session_state.USERNAME, 
                branch_from,
                branch_to,
                st.session_state.LAUNCH_NAME, 
                st.session_state.LAUNCH_NAME)
            st.session_state.sidebar_id = None
            # st.experimental_rerun()

        def cancel_copy_branch():
            st.session_state.sidebar_id = None
            # st.experimental_rerun()

        not_empty_branches = sqlite.get_not_empty_branches(
            conn, st.session_state.PRODUCT_CLUSTER_NAME, st.session_state.LAUNCH_NAME
        )
        branches_for_copy = [b for b in not_empty_branches if b != st.session_state.BRANCH_NAME and b is not None]
        if branches_for_copy:
            st.selectbox('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑', branches_for_copy, key='branch_to_copy_from')
            custom_param('–í', st.session_state.BRANCH_NAME)
            cols = st.columns(2)
            cols[0].button('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ‚úî', on_click=copy_branch)
            cols[1].button('–û—Ç–º–µ–Ω–∏—Ç—å ‚Ü©', on_click=cancel_copy_branch)
        else:
            with st.spinner(text='–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–∞–Ω—á–µ–π'):
                sleep(2)
            st.session_state.sidebar_id = None
            st.experimental_rerun()

    if st.session_state.TARIFF:
        set_up_tariff_form(conn,
            st.session_state.BRANCH_NAME, 
            st.session_state.TARIFF,
            st.session_state.LAUNCH_NAME)
        
    elif st.session_state.sidebar_id == '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–∞–Ω—á–∞':

        def copy_branch(error_slot):
            branch_to = st.session_state.BRANCH_NAME
            branch_from = st.session_state.branch_to_copy_from
            launch_to = st.session_state.LAUNCH_NAME
            launch_from = st.session_state.launch_to_copy_from
            if branch_to == branch_from and launch_to == launch_from:
                with error_slot.error('–ú–∞—Ç—Ä–∏—Ü—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç'):
                    sleep(1)
            else:
                sqlite.duplicate_branch(conn, st.session_state.USERNAME, 
                    branch_from, branch_to, launch_from, launch_to)
                with error_slot.success('–£—Å–ø–µ—à–Ω–æ'):
                    sleep(1)
                st.session_state.sidebar_id = None
            del st.session_state.launch_to_copy_from


        def cancel_copy_branch():
            st.session_state.sidebar_id = None

        st.button('‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è', on_click=get_back_to_branches)
        st.markdown('&nbsp;')
        st.header('–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã')
        if st.session_state.user_rights.get('IS_TESTER'):
            launch_type = st.radio('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞', options=['test', 'prod'], index=0)
            launches = sqlite.get_launches(conn, launch_type)
            if st.session_state.LAUNCH_NAME in launches:
                launch_index = launches.index(st.session_state.LAUNCH_NAME)
            else:
                launch_index = 0
            launch_name = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç',
                options=st.session_state.launches, 
                key='launch_to_copy_from',
                index=launch_index
            )
            not_empty_branches = sqlite.get_not_empty_branches_all(conn, st.session_state.launch_to_copy_from)
        else:
            st.session_state.launch_to_copy_from = st.session_state.LAUNCH_NAME
            not_empty_branches = sqlite.get_not_empty_branches(
                conn, st.session_state.PRODUCT_CLUSTER_NAME, st.session_state.launch_to_copy_from
            )
        error_slot = st.empty()
        if not_empty_branches:
            st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–∞–Ω—á', not_empty_branches, key='branch_to_copy_from')
            cols = st.columns(2)
            cols[1].button('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', on_click=copy_branch, args=(error_slot, ))
            cols[0].button('–û—Ç–º–µ–Ω–∞', on_click=cancel_copy_branch)
        else:
            st.caption('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–∞–Ω—á–µ–π')
              
    elif st.session_state.sidebar_id == '–û—á–∏—Å—Ç–∫–∞ –±—Ä–∞–Ω—á–∞':
        
        def clear_branch():
            sqlite.empty_branch(conn, st.session_state.BRANCH_NAME, st.session_state.LAUNCH_NAME)
            st.session_state.sidebar_id = None


        def cancel_clear_branch():
            st.session_state.sidebar_id = None


        st.markdown('''<p style="text-align: center;">
            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É?</p>
            ''', unsafe_allow_html=True) 
        cols = st.columns(2)
        cols[0].button('–û—Ç–º–µ–Ω–∞', on_click=cancel_clear_branch)
        cols[1].button('–û—á–∏—Å—Ç–∏—Ç—å', on_click=clear_branch)

    elif st.session_state.sidebar_id == '–°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤':

        if 'is_convertion' not in st.session_state:
            st.session_state.is_conversion = False

        def add_new_scenario():
            st.session_state.market_view = 'main'
            if st.session_state.new_scenario_name.replace(' ',''):
                sqlite.add_scenario(conn,
                    st.session_state.USERNAME, 
                    st.session_state.LAUNCH_NAME, 
                    st.session_state.REGION_NAME, 
                    st.session_state.new_scenario_name
                )


        def edit_scenario(scenario_id, scenario_name):
            st.session_state.market_view = 'scenario'
            st.session_state.scenario_id = scenario_id
            st.session_state.scenario_name = scenario_name
            st.session_state.sidebar_id = '–°—Ü–µ–Ω–∞—Ä–∏–π'
            show_scenario(scenario_id, scenario_name)


        def init_convert_scenario(scenario_id, scenario_name):
            show_scenario(scenario_id, scenario_name)
            st.session_state.scenario_id = scenario_id
            st.session_state.scenario_name = scenario_name
            st.session_state.is_conversion = True


        def show_scenario(scenario_id, scenario_name):
            st.session_state.scenario_id = scenario_id
            st.session_state.scenario_name = scenario_name
            st.session_state.region_scenario = sqlite.get_region_scenario_df(conn, scenario_id)


        def init_upd_scenario_status(scenario_id, status):
            sqlite.upd_scenario_status(conn, scenario_id, status, st.session_state.USERNAME)


        def convert_into_launch():
            if 'old_scenario_id' in st.session_state:
                sqlite.clear_for_convert(conn, st.session_state.BRANCH_NAME, st.session_state.convert_launch_name)
                sqlite.del_scenario_status(conn, st.session_state.old_scenario_id, '–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –∑–∞–ø—É—Å–∫')
                del st.session_state.old_scenario_id
            for rec in sqlite.get_actions(conn, st.session_state.scenario_id):
                tariff = rec.get('TARIFF')
                last_rec = sqlite.get_last_record(conn, st.session_state.BRANCH_NAME, tariff, st.session_state.launch_type)
                if not last_rec: 
                    base_tariff = get_base_tariff(tariff)
                    last_rec = sqlite.get_last_record(conn, st.session_state.BRANCH_NAME, base_tariff, st.session_state.launch_type)
                fee_type = rec.get('FEE_TYPE')
                for k, v in {'—Å—É—Ç.': '–°—É—Ç–∫–∏', '–º–µ—Å.': '–ü–ª–∞–≤–∞—é—â–∏–π –º–µ—Å—è—Ü'}.items():
                    fee_type = fee_type.replace(k, v)
                last_rec.update({
                    'ACTION': rec.get('ACTION'),
                    'LAUNCH_NAME': st.session_state.convert_launch_name,
                    'FEE_TYPE': fee_type,
                    'FEE': rec.get('FEE'),
                    'DATA_GB': rec.get('DATA_GB'),
                    'EXTRA': rec.get('EXTRA', '–ù–µ—Ç'),
                    'VOICE_MIN': rec.get('VOICE_MIN'),
                    'IS_FEE_DISCOUNT': rec.get('IS_FEE_DISCOUNT'),
                    'FEE_AFTER_DISCOUNT': rec.get('FEE_AFTER_DISCOUNT'),
                    'USERNAME': st.session_state.USERNAME
                })
                sqlite.add_record(conn, last_rec)
            sqlite.upd_scenario_status(conn, 
                st.session_state.scenario_id,
                '–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –∑–∞–ø—É—Å–∫', 
                st.session_state.USERNAME, 
                st.session_state.convert_launch_name
            )
            st.session_state.sidebar_id = '–°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤'
            st.session_state.is_conversion = False


        st.button('‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è', on_click=get_back_to_branches)
        st.markdown('&nbsp;')
        cols = st.columns([5, 1, 0.2])
        cols[0].header('–°—Ü–µ–Ω–∞—Ä–∏–∏')
        if st.session_state.user_rights.get('IS_INITIATOR'):
            new_scenario_btn = cols[1].button('‚ûï', help='–ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π')
            if new_scenario_btn:
                with st.form('new_scenario_form'):
                    scenario_name = st.text_input('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
                        key='new_scenario_name', value='')
                    st.write('')
                    cols = st.columns(2)
                    cols[0].form_submit_button('–û–ö', on_click=add_new_scenario)
                    cols[1].form_submit_button('–û—Ç–º–µ–Ω–∞')
        st.session_state.scenarios = sqlite.get_scenarios(conn, st.session_state.REGION_NAME)
        if not st.session_state.scenarios:  
            st.caption('–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤')
        else:
            st.write('')
            for num, scenario_dict in enumerate(st.session_state.scenarios):  
                # scenario_dict
                status = scenario_dict.get('STATUS')
                scenario_id = scenario_dict.get('SCENARIO_ID')
                scenario_name = scenario_dict.get('SCENARIO_NAME')
                act_max_date_time = scenario_dict.get('ACT_MAX_DATE_TIME')
                status_date_time = scenario_dict.get('STATUS_DATE_TIME')
                is_approver = st.session_state.user_rights.get('IS_APPROVER')
                is_initiator = st.session_state.user_rights.get('IS_INITIATOR')
                
                with st.form(f'{num} {scenario_name}'):
                    st.write('')  
                    cols = st.columns([5, 1, 0.4])
                    cols[0].markdown(f'''<p style="font-size: 1vw; font_weight: bold; margin-bottom: 5px;">
                            {scenario_name}</p>''', unsafe_allow_html=True)
                    cols[1].form_submit_button('üëÅÔ∏è', on_click=show_scenario, args=(scenario_id, scenario_name), help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π')
                    st.markdown(f'''<p style="font-size: 0.6vw; color: grey; margin-bottom: 0;">
                        –°–æ–∑–¥–∞–Ω: {scenario_dict.get('USERNAME')} <br>
                        –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {scenario_dict.get('DATE_TIME')}</p>''', unsafe_allow_html=True)
                    st.write('')
                    if not is_approver and is_initiator and (not status or status == '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'):
                        st.form_submit_button('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', on_click=edit_scenario, args=(scenario_id, scenario_name), help='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π')
                    if is_approver:
                        if status == '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏':
                            st.info(f'''–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ—Ç {scenario_dict.get('USERNAME')} {scenario_dict.get('STATUS_DATE_TIME')}''')
                            st.write('')
                            cols = st.columns(2)
                            cols[0].form_submit_button('–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å', on_click=init_upd_scenario_status, args=(scenario_id, '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ'))
                            cols[1].form_submit_button('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', on_click=init_upd_scenario_status, args=(scenario_id, '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'))
                        elif status == '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ':
                            st.success(f'''–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ''')
                            st.form_submit_button('–û—Ç–º–µ–Ω–∞', on_click=init_upd_scenario_status, args=(scenario_id, '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏'))
                        elif status == '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ':
                            st.error(f'–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
                            st.form_submit_button('–û—Ç–º–µ–Ω–∞', on_click=init_upd_scenario_status, args=(scenario_id, '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏'))
                        elif status == '–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –∑–∞–ø—É—Å–∫':
                            st.success(f'''–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –∑–∞–ø—É—Å–∫ {scenario_dict.get('LAUNCH_NAME')} {scenario_dict.get('STATUS_DATE_TIME')}''')
                    elif is_initiator:
                        if not status and act_max_date_time:
                            st.form_submit_button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ', on_click=init_upd_scenario_status, args=(scenario_id, '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏'))
                        elif status == '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏':
                            st.info('–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏')
                            st.form_submit_button('–û—Ç–æ–∑–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å', on_click=init_upd_scenario_status, args=(scenario_id, None))
                        elif status == '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ':
                            st.success(f'''–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {scenario_dict.get('STATUS_USERNAME')} {scenario_dict.get('STATUS_DATE_TIME')}''')
                            convert_slot = st.empty()
                            conv = convert_slot.form_submit_button('–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∑–∞–ø—É—Å–∫', on_click=init_convert_scenario, args=(scenario_id, scenario_name))
                            if conv:
                                with convert_slot:
                                    custom_param('–ë—Ä–∞–Ω—á', st.session_state.BRANCH_NAME)
                                convert_launches = sqlite.get_available_launches(conn, st.session_state.BRANCH_NAME, st.session_state.launch_type)
                                if convert_launches:
                                    st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫', key='convert_launch_name', options=convert_launches)
                                    for rec in st.session_state.scenarios:
                                        if rec.get('LAUNCH_NAME') == st.session_state.convert_launch_name:
                                            if rec.get('STATUS') == '–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –∑–∞–ø—É—Å–∫':
                                                st.info(f'''–í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç
                                                —É–∂–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ —ç—Ç–æ—Ç –∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏–π "{rec.get('SCENARIO_NAME')}"
                                                ''')
                                                st.session_state.old_scenario_id = rec.get('SCENARIO_ID')
                                                break
                                    st.form_submit_button('–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', on_click=convert_into_launch)
                                    st.form_submit_button('–û—Ç–º–µ–Ω–∞')
                                else:
                                    st.info('–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–æ–≤')
                        elif status == '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ':
                            if act_max_date_time < status_date_time:
                                st.error(f'''–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {scenario_dict.get('STATUS_USERNAME')} {scenario_dict.get('STATUS_DATE_TIME')}''')
                            else:
                                st.form_submit_button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ', on_click=init_upd_scenario_status, args=(scenario_id, '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏')) 
                        elif status == '–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –∑–∞–ø—É—Å–∫':
                            st.success(f'''–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –∑–∞–ø—É—Å–∫ {scenario_dict.get('LAUNCH_NAME')} {scenario_dict.get('STATUS_DATE_TIME')}''')


    elif st.session_state.sidebar_id == '–°—Ü–µ–Ω–∞—Ä–∏–π':

        def init_edit_action(tariff):
            st.session_state.action_record = sqlite.get_action_by_tariff(conn, st.session_state.scenario_id, tariff)
            init_constructor()


        def init_delete_action(tariff):
            sqlite.delete_action(conn, st.session_state.scenario_id, tariff)


        def init_constructor():
            st.session_state.sidebar_id = '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä'
            st.session_state.market_view = 'scenario'


        def init_delete_scenario():
            sqlite.delete_scenario(conn, st.session_state.scenario_id)
            get_back_to_scenarios()


        def init_rename_scenario():
            sqlite.rename_scenario(conn, st.session_state.scenario_name, st.session_state.new_scenario_name)
            st.session_state.scenario_name = st.session_state.new_scenario_name


        st.button('‚Ü© –ö —Å—Ü–µ–Ω–∞—Ä–∏—è–º', on_click=get_back_to_scenarios)
        st.markdown('&nbsp;')
        cols = st.columns([4, 1, 1, 0.2])
        cols[0].header(st.session_state.scenario_name)
        if not st.session_state.user_rights.get('IS_APPROVER'):
            rename_scenario_btn = cols[1].button('‚úèÔ∏è', help='–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π')
            delete_scenario_btn = cols[2].button('‚ùå', help='–£–¥–∞–ª–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π')
            rename_delete_slot = st.empty()
            if rename_scenario_btn:
                with rename_delete_slot.form('rename_scenario_form'):
                    scenario_name = st.text_input('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
                        key='new_scenario_name', value=st.session_state.scenario_name)
                    st.write('')
                    cols = st.columns(2)
                    cols[0].form_submit_button('–û–ö', on_click=init_rename_scenario)
                    cols[1].form_submit_button('–û—Ç–º–µ–Ω–∞')
            if delete_scenario_btn:
                with rename_delete_slot.form('delete_scenario_form'):
                    st.write('–í—ã —É–≤–µ—Ä–µ–Ω—ã?')
                    st.write('')
                    cols = st.columns(2)
                    cols[0].form_submit_button('–î–∞', on_click=init_delete_scenario)
                    cols[1].form_submit_button('–û—Ç–º–µ–Ω–∞')
        action_records = sqlite.get_actions(conn, st.session_state.scenario_id)
        st.write('')
        st.button('–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚ûï', help='–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', on_click=init_constructor) 
        if not action_records:
            st.caption('–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ —ç—Ç–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏')
        else:
            actions_to_render = pd.DataFrame.from_dict(action_records, orient='columns')
            actions_to_render['IS_SCENARIO'] = True
            actions_to_render['OPERATOR'] = 'Tele2'
            for action_record in action_records:
                tariff = action_record.get('TARIFF')
                with st.form(f'{tariff} action'):
                    st.write('')
                    cols = st.columns([4, 1, 1, 0.2])
                    cols[0].markdown(f'''<p style="font-size: 1.2vw; font_weight: bold; margin-bottom: 5px;">
                        {tariff}</p>''', unsafe_allow_html=True)
                    action = action_record.get('ACTION')
                    if action != '–ó–∞–∫—Ä—ã—Ç—å':
                        cols[1].form_submit_button('‚úèÔ∏è', help='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', on_click=init_edit_action, args=(tariff, ))
                    cols[2].form_submit_button('‚ùå', help='–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', on_click=init_delete_action, args=(tariff, ))
                    if action == '–ó–∞–∫—Ä—ã—Ç—å':
                        cols[0].markdown(f'''<p style = "font-family: Tele2 TextSans; color: #eb4343; margin-bottom: 3px;
                        font-size: 1vw; font-weight: regular;">{action}</p>''', unsafe_allow_html=True)
                        pass
                    elif action == '–ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ':
                        cols[0].markdown(f'''<p style = "font-family: Tele2 TextSans; color: #00b5ef; margin-bottom: 10px;
                        font-size: 1vw; font-weight: regular;">{action}</p>''', unsafe_allow_html=True)
                        st.markdown(f'''<p style="font-size: 0.8vw; color: grey; margin-bottom: 0;">
                                    –ê–ü: {str(action_record.get('FEE'))}{'/' + str(action_record.get('FEE_AFTER_DISCOUNT'))
                                    if action_record.get('IS_FEE_DISCOUNT') else ''}</p>''', unsafe_allow_html=True)
                        for param, value in action_record.items():
                            if param in ['FEE_TYPE', 'IS_SHELF', 'IS_CONVERGENT','VOICE_MIN', 'EXTRAS', 'DATA_GB']:
                                st.markdown(f'''<p style="font-size: 0.8vw; color: grey; margin-bottom: 0;">
                                    {TOOLTIP_DICT.get(param, param)}: {value}</p>''', unsafe_allow_html=True)
                    elif action == '–ò–∑–º–µ–Ω–∏—Ç—å':
                        market_record = st.session_state.region_market[
                            st.session_state.region_market["TARIFF"] == tariff].to_dict('records')[0]
                        are_there_changes = False
                        for param in CONSTRUCTOR_PARAMS:
                            new_value = action_record.get(param)
                            old_value = market_record.get(param)
                            if old_value != new_value:
                                st.markdown(f'''<p style="font-size: 0.8vw; color: grey; margin-bottom: 0;">
                                    {TOOLTIP_DICT.get(param, param)}: {old_value} ‚Üí {new_value}</p>''', unsafe_allow_html=True)
                                are_there_changes = True
                        if not are_there_changes:
                            init_delete_action(action_record.get('TARIFF'))
                    st.write('')
        st.session_state.region_scenario = sqlite.get_region_scenario_df(conn, st.session_state.scenario_id)


    elif st.session_state.sidebar_id == '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä':

        def apply_action():
            sqlite.add_action(conn, st.session_state.constructor)
            st.session_state.action_record.clear()
            st.session_state.constructor.clear()
            st.session_state.sidebar_id = '–°—Ü–µ–Ω–∞—Ä–∏–π'


        def check_action(action, record, slot):
            tariff = st.session_state.constructor.get('TARIFF')
            if not tariff:
                with slot.error('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'):
                    sleep(2)
                    return
            elif tariff.replace(' ', '') == '':
                with slot.error('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'):
                    sleep(2)
                    return
            if action == '–ò–∑–º–µ–Ω–∏—Ç—å':
                if all(record.get(param) == st.session_state.constructor.get(param) for param in CONSTRUCTOR_PARAMS):
                    with slot.error('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å'):
                        sleep(2)
                        return
                else:
                    apply_action()
            elif action == '–ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ':
                check_dict = check_if_accept_changes()
                if all(check_dict.values()):
                    apply_action()
                else:
                    for metric, accept_bool in check_dict.items():
                        if not accept_bool:
                            with slot.error(f"{st.session_state.repr_dic.get(metric)} –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –º–∞—Ç—Ä–∏—Ü—ã"):
                                sleep(2)
                                return
            else:
                apply_action()
            

        def cancel_action():
            st.session_state.action_record.clear()
            st.session_state.constructor.clear()
            st.session_state.sidebar_id = '–°—Ü–µ–Ω–∞—Ä–∏–π'


        def clear_constructor():
            st.session_state.constructor.clear()

        
        custom_param('–¢–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π', st.session_state.scenario_name)
        action_options = ['–ò–∑–º–µ–Ω–∏—Ç—å', '–ó–∞–∫—Ä—ã—Ç—å', '–ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ']
        
        if st.session_state.action_record:
            record = st.session_state.action_record
            tariff = record.get('TARIFF')
            custom_param('–¢–∞—Ä–∏—Ñ', tariff)
            action = record.get('ACTION')
            action_index = action_options.index(action)
            custom_param('–¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', action)
        else:
            tariff_index = 0
            tariff_slot = st.empty()
            tele2_tariffs = st.session_state.tele2_tariffs
            if '<–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç>' not in tele2_tariffs: tele2_tariffs.append('<–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç>')
            tariff = tariff_slot.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ', options=tele2_tariffs, index=tariff_index)
            if tariff == '<–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç>':
                with tariff_slot:
                    custom_param('–¢–∞—Ä–∏—Ñ', '<–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç>')
                tariff = st.text_input(label='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', key='–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞',
                    help='''–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è: —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–∞—Ä–∏—Ñ–∞.
                    –£—á—Ç–∏—Ç–µ, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
                ''')
                tariff = tariff.capitalize()
            
            action_index = 0
            action = st.radio('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', index=action_index, options=action_options, on_change=clear_constructor,
                help='''–í—ã–±–µ—Ä–∏—Ç–µ "–ò–∑–º–µ–Ω–∏—Ç—å" –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ê–ü –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤.
                –í—ã–±–µ—Ä–∏—Ç–µ "–ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ" –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –ø–∞–∫–µ—Ç–æ–≤.
                –ü—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –∏–∑ –ª–∏–Ω–µ–π–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ó–∞–∫—Ä—ã—Ç—å".
                '''
            )

        if tariff in st.session_state.tele2_tariffs:
            record = st.session_state.region_market[st.session_state.region_market["TARIFF"] == tariff].to_dict('records')[0]
        else:
            record = dict()
        st.session_state.constructor['ACTION'] = action
        st.session_state.constructor['TARIFF'] = tariff
        if action == '–ó–∞–∫—Ä—ã—Ç—å':
            for param in CONSTRUCTOR_PARAMS:
                value = record.get(param)
                st.session_state.constructor[param] = value
        elif action == '–ò–∑–º–µ–Ω–∏—Ç—å':
            # TOOLTIP_DICT
            for param in CONSTRUCTOR_PARAMS:
                value = record.get(param)
                if param == 'FEE_TYPE':
                    st.session_state.constructor[param] = value
                    custom_param(TOOLTIP_DICT[param], value)
                    # options = list(st.session_state.region_market[param].unique())
                    # st.session_state.constructor[param] = st.radio(label=TOOLTIP_DICT[param], key=param, options=options, index=(options.index(value) if value else 0))
                elif param == 'IS_SHELF':
                    st.session_state.constructor[param] = int(st.checkbox(label=TOOLTIP_DICT[param], key=param, value=(value if value else 0)))
                elif param == 'IS_CONVERGENT':
                    st.session_state.constructor[param] = int(st.checkbox(label=TOOLTIP_DICT[param], key=param, value=(value if value else 0)))
                elif param == 'FEE':
                    st.session_state.constructor[param] = value
                    custom_param(TOOLTIP_DICT[param], value)
                    # st.session_state.constructor[param] = st.number_input(label=TOOLTIP_DICT[param], key=param, min_value=0, max_value=10000,
                    # value=(int(value) if value else 0), step=10)
                elif param == 'IS_FEE_DISCOUNT':
                    st.session_state.constructor[param] = int(st.checkbox(label=TOOLTIP_DICT[param], key=param, value=(value if value else 0)))
                elif param == 'FEE_AFTER_DISCOUNT':
                    if st.session_state.constructor.get('IS_FEE_DISCOUNT'):
                        st.session_state.constructor[param] = st.number_input(label=TOOLTIP_DICT[param], key=param,
                                max_value=int(st.session_state.constructor.get('FEE')), step=10, 
                                value=(int(value) if value else 0)
                        )
                    else:
                        st.session_state.constructor[param] = 0
                elif param == 'DATA_GB':
                    st.session_state.constructor[param] = value                
                    custom_param(TOOLTIP_DICT[param], value)
                elif param == 'EXTRA':
                    extras_options = st.session_state.extras[:-1]
                    st.session_state.constructor[param] = st.selectbox('–î–æ–ø –ø–∞–∫–µ—Ç—ã –∏ —É–¥–≤–æ–µ–Ω–∏—è', 
                        options=extras_options, key=param, format_func=(lambda x: '–ù–µ—Ç' if not x else x), index=0
                    )
                elif param  == 'VOICE_MIN':
                    st.session_state.constructor[param] = value
                    custom_param(TOOLTIP_DICT[param], value)
                    # if value and value not in voice_min_options: voice_min_options.append(value)
                    # st.session_state.constructor[param] = st.selectbox(label=TOOLTIP_DICT[param], key=param, options=voice_min_options, 
                            # index=(voice_min_options.index(value) if value else 0))
                elif param == 'USAGE':
                    # options = sorted(list(st.session_state.region_market[param].unique()))
                    # st.session_state.constructor[param] = st.text_area(label=TOOLTIP_DICT[param], key=param, value=(value if value else ''))
                    st.session_state.constructor[param] = value
                    custom_param(TOOLTIP_DICT[param], value)
                elif param == 'INTERNET_EXTRA':
                    # st.session_state.constructor[param] = st.text_area(label=TOOLTIP_DICT[param], key=param, value=(value if value else ''))
                    st.session_state.constructor[param] = value
                    custom_param(TOOLTIP_DICT[param], value)
        elif action == '–ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ':
            for param in CONSTRUCTOR_PARAMS:
                value = record.get(param)
                if param == 'IS_SHELF':
                    st.session_state.constructor[param] = int(st.checkbox(label=TOOLTIP_DICT[param], key=param, value=(value if value else 0)))
                elif param == 'IS_CONVERGENT':
                    st.session_state.constructor[param] = int(st.checkbox(label=TOOLTIP_DICT[param], key=param, value=(value if value else 0)))
                elif param == 'FEE_TYPE':
                    options = list(st.session_state.region_market[param].unique())
                    st.session_state.constructor[param] = st.radio(label=TOOLTIP_DICT[param], key=param, options=options, index=(options.index(value) if value else 0))
                elif param == 'FEE':
                    st.session_state.constructor[param] = st.number_input(label=TOOLTIP_DICT[param], key=param,
                        min_value=0, max_value=10000, value=(int(value) if value else 0), step=10
                    )
                elif param == 'IS_FEE_DISCOUNT':
                    st.session_state.constructor[param] = int(st.checkbox(label=TOOLTIP_DICT[param], key=param, value=(value if value else 0)))
                elif param == 'FEE_AFTER_DISCOUNT':
                    if st.session_state.constructor.get('IS_FEE_DISCOUNT'):
                        st.session_state.constructor[param] = st.number_input(label=TOOLTIP_DICT[param], key=param,
                                max_value=int(st.session_state.constructor['FEE']), step=10, 
                                value=(int(value) if value else 0)
                        )
                    else:
                        st.session_state.constructor[param] = 0
                elif param == 'DATA_GB':
                    data_gb_options.append(999)
                    if value and value not in data_gb_options: data_gb_options.append(value)
                    st.session_state.constructor[param] = st.selectbox(label=TOOLTIP_DICT[param], key=param, options=data_gb_options,
                            index=(data_gb_options.index(value) if value else 0), help='–¥–ª—è –ë–µ–∑–ª–∏–º–∏—Ç–∞ –ø—Ä–æ—Å—Ç–∞–≤–ª—è—Ç—å 999')
                elif param == 'EXTRA':
                    extras_options = st.session_state.extras[:-1]
                    st.session_state.constructor[param] = st.selectbox('–î–æ–ø –ø–∞–∫–µ—Ç—ã –∏ —É–¥–≤–æ–µ–Ω–∏—è', 
                        options=extras_options, key=param, format_func=(lambda x: '–ù–µ—Ç' if not x else x), index=0
                    )
                elif param  == 'VOICE_MIN':
                    if value and value not in voice_min_options: voice_min_options.append(value)
                    st.session_state.constructor[param] = st.selectbox(label=TOOLTIP_DICT[param], key=param, options=voice_min_options, 
                            index=(voice_min_options.index(value) if value else 0))
                elif param == 'USAGE':
                    usage_options = ['', 'All Rus', 'OSS Rus', 'OSS Reg', 'OSS mob Reg', 'All Reg + On-net Rus', 'OSS Reg + On-net Rus']
                    st.session_state.constructor[param] = st.selectbox(label=TOOLTIP_DICT[param], key=param, options=usage_options)
                    # options = sorted(list(st.session_state.region_market[param].unique()))
                    # st.session_state.constructor[param] = st.text_area(label=TOOLTIP_DICT[param], key=param, value=(value if value else ''))
                elif param == 'INTERNET_EXTRA':
                    int_extra_options = ['', '+c/c, –º–µ—Å—Å.', '+c/c, –º–µ—Å—Å., YouTube']
                    st.session_state.constructor[param] = st.selectbox(label=TOOLTIP_DICT[param], key=param, options=int_extra_options)
                    # st.session_state.constructor[param] = st.text_area(label=TOOLTIP_DICT[param], key=param, value=(value if value else ''))
        st.session_state.constructor['SCENARIO_ID'] = st.session_state.scenario_id
        st.session_state.constructor['USERNAME'] = st.session_state.USERNAME
        if action != '–ù–µ—Ç':
            cols = st.columns(2)
            slot = st.empty()
            cols[0].button('–ü—Ä–∏–º–µ–Ω–∏—Ç—å', on_click=check_action, args=(action, record, slot))
            cols[1].button('–û—Ç–º–µ–Ω–∞', on_click=cancel_action)
        else:
            st.button('–û—Ç–º–µ–Ω–∞', on_click=cancel_action)
        
        
            
    elif st.session_state.sidebar_id == '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–∞–Ω—á–∞':
        set_up_copy_branch()

    #   –ò–ù–ê–ß–ï –†–ò–°–£–ï–ú –ö–õ–ê–°–¢–ï–†, –ë–†–ê–ù–ß
    else:

        def show_status_notes(rights):
            # st.markdown('&nbsp;')
            # st.markdown(' --- ')
            if rights == 'extended':
                captions_block('‚úçÔ∏è –í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É', '‚úâÔ∏è –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏', 'üïê –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ', 'üîß –í –Ω–∞—Å—Ç—Ä–æ–π–∫–µ')   
            elif rights == 'standard':
                captions_block('‚úçÔ∏è –í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É', '‚õîÔ∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É', 'üïê –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏', 'üîß –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ (–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ)')
            elif rights == 'test':
                captions_block('‚úçÔ∏è –í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É', 'üîß –í –Ω–∞—Å—Ç—Ä–æ–π–∫–µ') 


        def get_marked(option, statuses, rights):
            if statuses.get(option) == 'sent':
                if rights.get('IS_OWNER'):
                    return f'{option} ‚úâÔ∏è'
                elif rights.get('IS_INITIATOR'):
                    return f'{option} üïê'
                else:
                    return option
            elif statuses.get(option) == 'rejected':
                if rights.get('IS_OWNER'):
                    return f'{option} üïê'
                elif rights.get('IS_INITIATOR'):
                    return f'{option} ‚õîÔ∏è'
                else:
                    return option
            elif statuses.get(option) == 'editing':
                return f'{option} ‚úçÔ∏è'
            elif statuses.get(option) == 'setup':
                return f'{option} üîß'
            else:
                return option


        def update_main_page(what):
            st.session_state.main_page_id = what
        

        if 'LAUNCH_NAME' in st.session_state:
            if st.session_state.LAUNCH_NAME in st.session_state.launches:
                launch_index = st.session_state.launches.index(st.session_state.LAUNCH_NAME)
            else:
                launch_index = 0
        else:
            launch_index = 0
        if st.session_state.main_page_id != '–†—ã–Ω–æ–∫':
                # launches = sqlite.get_available_launches(conn, st.session_state.BRANCH_NAME, st.session_state.launch_type)
            st.selectbox('–ü—Ä–æ–µ–∫—Ç', options=st.session_state.launches, index=launch_index, key='SEL_LAUNCH_NAME', on_change=update_launch_name)
            if st.session_state.LAUNCH_NAME != st.session_state.SEL_LAUNCH_NAME:
                st.session_state.LAUNCH_NAME = st.session_state.SEL_LAUNCH_NAME
            if st.session_state.user_rights.get('IS_OWNER'):
                cols = st.columns(5)
                new_launch_btn = cols[0].button('‚ûï', help='–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç')
                new_launch_slot = st.empty()
                if new_launch_btn:
                    def init_add_launch():
                        sqlite.add_launch(conn, st.session_state.new_launch_name, st.session_state.launch_type)
                        st.session_state.LAUNCH_NAME = sqlite.get_last_launch(conn, st.session_state.launch_type)
                    new_launch_slot.text_input('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞', key='new_launch_name', on_change=init_add_launch)
                    st.button('–û—Ç–º–µ–Ω–∞')
                if st.session_state.LAUNCH_NAME:
                    rename_launch_btn = cols[1].button('‚úèÔ∏è', help='–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å')
                    if rename_launch_btn:
                        st.markdown(' --- ')
                        def init_rename_launch():
                            sqlite.rename_launch(conn, st.session_state.LAUNCH_NAME, st.session_state.new_launch_name)
                            st.session_state.LAUNCH_NAME = sqlite.get_last_launch(conn, st.session_state.launch_type)
                        st.text_input('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞', key='new_launch_name', on_change=init_rename_launch)
                        st.button('–û—Ç–º–µ–Ω–∞')
                        st.markdown(' --- ')
                    
                    delete_launch_btn = cols[2].button('‚ùå', help='–£–¥–∞–ª–∏—Ç—å')
                    if delete_launch_btn:
                        st.markdown(' --- ')
                        st.info('–í–Ω–∏–º–∞–Ω–∏–µ, –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç. –í—ã —É–≤–µ—Ä–µ–Ω—ã?')
                        are_you_sure = st.columns(2)
                        def init_delete_launch():
                            sqlite.delete_launch(conn, st.session_state.LAUNCH_NAME)
                            st.session_state.LAUNCH_NAME = sqlite.get_last_launch(conn, st.session_state.launch_type)
                        are_you_sure[0].button('–£–¥–∞–ª–∏—Ç—å', on_click=init_delete_launch)
                        are_you_sure[1].button('–û—Ç–º–µ–Ω–∞')
                        st.markdown(' --- ')
                    
                    download_statuses_btn = cols[3].button('üßê', help='–í—ã–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã') 
                    if download_statuses_btn:
                        statuses_list = sqlite.get_statuses_df(conn, st.session_state.LAUNCH_NAME)
                        statuses_df = pd.DataFrame(statuses_list, columns=['PRODUCT_CLUSTER_NAME','BRANCH_NAME','STATUS'])
                        st.sidebar.markdown(get_table_download_link(statuses_df, f'–°—Ç–∞—Ç—É—Å—ã', drop_index=True), unsafe_allow_html=True)
            
        st.session_state.cluster_statuses = sqlite.get_cluster_statuses(
            conn, st.session_state.user_clusters, st.session_state.LAUNCH_NAME
        )


        if 'PRODUCT_CLUSTER_NAME' not in st.session_state:
            st.session_state.PRODUCT_CLUSTER_NAME = st.session_state.user_rights.get('CLUSTER')
        if not st.session_state.user_rights.get('IS_OWNER') and not st.session_state.user_rights.get('IS_APPROVER') \
            and not st.session_state.user_rights.get('IS_TESTER'):
            custom_param('–ö–ª–∞—Å—Ç–µ—Ä', st.session_state.PRODUCT_CLUSTER_NAME)
        else: 
            def update_cluster():
                st.session_state.PRODUCT_CLUSTER_NAME = st.session_state.SEL_PRODUCT_CLUSTER_NAME

            st.session_state.user_clusters = ['(All)'] + CLUSTERS
            clusters = sorted(st.session_state.user_clusters)
            st.selectbox('–ö–ª–∞—Å—Ç–µ—Ä', 
                options=clusters,
                format_func=lambda x: get_marked(x, st.session_state.cluster_statuses, st.session_state.user_rights),
                on_change=update_cluster,
                key='SEL_PRODUCT_CLUSTER_NAME'
            )
        


        
        if st.session_state.user_rights.get('IS_OWNER') and st.session_state.main_page_id != '–†—ã–Ω–æ–∫':
            cols = st.columns(5)
            get_settings_btn = cols[0].button('üì§', help='–í—ã–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞')
            if get_settings_btn:
                columns_dict = get_columns_dict()
                df = get_pce_df(st.session_state.LAUNCH_NAME)
                df = get_pce_df(st.session_state.LAUNCH_NAME, st.session_state.PRODUCT_CLUSTER_NAME)
                if not df.empty:
                    df.rename(columns_dict, axis=1, inplace=True)
                    df = df.loc[:,~df.columns.duplicated()]
                    st.markdown(get_table_download_link(
                        df, f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {st.session_state.PRODUCT_CLUSTER_NAME}', drop_index=True), 
                        unsafe_allow_html=True)
                else:
                    st.info('–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞')
            if not st.session_state.user_rights.get('IS_INITIATOR') and st.session_state.user_rights.get('IS_OWNER'):
                reject_cluster_btn = cols[1].button(' üë©üèº‚Äçüè´', help='–í–µ—Ä–Ω—É—Ç—å –∫–ª–∞—Å—Ç–µ—Ä –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É')
                reject_cluster_slot = st.empty()
                if reject_cluster_btn:
                    with reject_cluster_slot.expander('–í–µ—Ä–Ω—É—Ç—å –∫–ª–∞—Å—Ç–µ—Ä –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É üë©üèº‚Äçüè´', expanded=True):
                        reject_what = st.session_state.PRODUCT_CLUSTER_NAME.replace('(All)','–≤—Å–µ –∫–ª–∞—Å—Ç–µ—Ä—ã')
                        st.write(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å {reject_what} –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É?')
                        cols = st.columns(2)
                        def reject_cluster():
                            for branch in st.session_state.branches:
                                if st.session_state.branch_statuses.get(branch) == 'sent':
                                    st.session_state.BRANCH_NAME = branch
                                    sqlite.add_branch_status(conn, st.session_state, status='rejected')
                            # st.experimental_rerun()
                        cols[0].button('–í–µ—Ä–Ω—É—Ç—å', on_click=reject_cluster)
                        cols[1].button('–û—Ç–º–µ–Ω–∞')


        st.session_state.branch_statuses = sqlite.get_branch_statuses(conn, st.session_state.LAUNCH_NAME)
        # print(st.session_state.branch_statuses)
        if st.session_state.PRODUCT_CLUSTER_NAME == '(All)':
            st.session_state.branches = sqlite.get_branches(conn, CLUSTERS)
            st.session_state.cluster_status = None
        else:
            st.session_state.branches = sqlite.get_branches(conn, st.session_state.PRODUCT_CLUSTER_NAME)
            st.session_state.cluster_status = st.session_state.cluster_statuses[st.session_state.PRODUCT_CLUSTER_NAME]
        

        def update_branch():
            st.session_state.BRANCH_NAME = st.session_state.SEL_BRANCH_NAME
            st.session_state.REGION_NAME = branch_to_region(st.session_state.BRANCH_NAME)

        if 'BRANCH_NAME' in st.session_state:
            if st.session_state.BRANCH_NAME in st.session_state.branches:
                branch_index = st.session_state.branches.index(st.session_state.BRANCH_NAME)
            else:
                branch_index = 0
        else:
            branch_index = 0
        st.selectbox('–ë—Ä–∞–Ω—á',
                options=st.session_state.branches, 
                index=branch_index,
                format_func=lambda x: get_marked(x, st.session_state.branch_statuses, st.session_state.user_rights),
                on_change=update_branch,
                key='SEL_BRANCH_NAME')
        if st.session_state.BRANCH_NAME != st.session_state.SEL_BRANCH_NAME:
            update_branch()
            

        show_status_notes(st.session_state.user_rights)
        st.session_state.branch_status = st.session_state.branch_statuses.get(st.session_state.BRANCH_NAME)
        if st.session_state.branch_status not in ('sent', 'setup') or st.session_state.user_rights.get('IS_OWNER'):
            st.session_state.is_editing_allowed = True
        else:
            st.session_state.is_editing_allowed = False
        st.session_state.actual_tariffs = sqlite.get_tariffs_by_branch(conn, st.session_state.BRANCH_NAME, st.session_state.LAUNCH_NAME)

        def show_scenarios():
            df = st.session_state.region_market
            st.session_state.tele2_tariffs = sorted(list(df[df['OPERATOR'] == 'Tele2']['TARIFF'].unique()))
            st.session_state.sidebar_id = '–°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤'
            if 'region_scenario' in st.session_state:
                del st.session_state.region_scenario

        if st.session_state.main_page_id == '–†—ã–Ω–æ–∫':
            st.button('üë®‚Äçüîß –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', on_click=show_scenarios)

        elif st.session_state.main_page_id == '–ó–∞–ø—É—Å–∫':
            
            def init_copy_branch():
                st.session_state.sidebar_id = '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–∞–Ω—á–∞'

            def init_clear_branch():
                st.session_state.sidebar_id = '–û—á–∏—Å—Ç–∫–∞ –±—Ä–∞–Ω—á–∞'

            if st.session_state.user_rights.get('IS_INITIATOR') and st.session_state.is_editing_allowed:
                st.button('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑...', help="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É –∏–∑...", on_click=init_copy_branch)
                st.button('–û—á–∏—Å—Ç–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É', help="–û—á–∏—Å—Ç–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –±—Ä–∞–Ω—á–∞", on_click=init_clear_branch)


def set_up(conn):

    if 'is_matrice_reloading_allowed' not in st.session_state:
        st.session_state.is_matrice_reloading_allowed = True
    if 'is_tariff_copying' not in st.session_state:
        st.session_state.is_tariff_copying = False 
    if 'extras' not in st.session_state:
        st.session_state.extras = ['–ù–µ—Ç', '5 GB', '10 GB', '15 GB', '–£–¥–≤–æ–µ–Ω–∏–µ', '<–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç>']  

    st.session_state.launches = sqlite.get_launches(conn, st.session_state.launch_type)
    if 'LAUNCH_NAME' not in st.session_state: st.session_state.LAUNCH_NAME = st.session_state.launches[0]

    menu_dict = {
        '–†—ã–Ω–æ–∫':'grid', 
        '–ó–∞–ø—É—Å–∫':'gear', 
        '–ß–µ–∫-–ª–∏—Å—Ç':'clipboard-check', 
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏':'chat'
    }
    if st.session_state.user_rights.get('IS_OWNER'): menu_dict['–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏'] = 'book'
    # if st.session_state.USERNAME == 'igor.i.plotnikov':
        # menu_dict.update({'–†—ã–Ω–æ–∫ NEW': 'erfc'})
    st.session_state.main_page_id = option_menu(None, 
            options=[k for k in menu_dict.keys()],
            icons=[v for v in menu_dict.values()],
            menu_icon="app-indicator", default_index=0, orientation='horizontal',
            styles={
                "container": {"background-color": "transparent"},
            #     "icon": {"color": "orange", "font-size": "25px"}, 
            #     "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#eee"},
            #     "nav-link-selected": {"background-color": "#02ab21"},
            }
        )
    if st.session_state.main_page_id != '–†—ã–Ω–æ–∫' and st.session_state.sidebar_id in ['–°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤', '–°—Ü–µ–Ω–∞—Ä–∏–π', '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∑–∞–ø—É—Å–∫']:
        st.session_state.sidebar_id = None
        if 'region_scenario' in st.session_state:
            del st.session_state.region_scenario
    
    with st.sidebar:
        set_up_sidebar(conn)
    set_up_main_page(conn)

    # –ü–û–°–ú–û–¢–†–ï–¢–¨
    # st.session_state.actual_tariffs
    # {k:v for k, v in st.session_state.items() if k.upper() == k}
    # st.session_state.this_launch_records
    # st.session_state.VOICE_MIN_M
    # st.session_state.branch_statuses
    # st.session_state.LAUNCH_NAME
    # st.write({k: v for k, v in st.session_state.items() if k != 'dic' and k != 'password' and 'FormSubmitter' not in k})
    # st.write({k: v for k, v in st.session_state.items() if 'FormSubmitter'  in k})
    # st.session_state.branches
    # st.session_state.branch_statuses
  

def log_in(username, password):
    token = win32security.LogonUser(
        username,
        SERVERNAME,
        password,
        win32security.LOGON32_LOGON_NETWORK,
        win32security.LOGON32_PROVIDER_DEFAULT
    )     
    return bool(token)


def main():

    if 'counter' not in st.session_state:
        st.session_state.counter = 0
    else:
        st.session_state.counter +=1

    _, image_col, _ = st.sidebar.columns([0.5, 1, 0.5])
    image_col.image('Tele2-PLM-logo.png', width=115)
    st.sidebar.markdown('&nbsp;')
    log_in_slot = st.sidebar.empty()

    if 'logged_in' in st.session_state:
        if 'conn' not in st.session_state:
            st.session_state.conn = sqlite.create_connection('DB.sqlite3')
            sqlite.add_auth(st.session_state.conn, st.session_state.USERNAME)
        if 'repr_dic' not in st.session_state:
            st.session_state.repr_dic = sqlite.get_repr_dic(st.session_state.conn)
        if 'user_rights' not in st.session_state:
            st.session_state.user_rights = sqlite.get_rights_by_username(st.session_state.conn, st.session_state.USERNAME)
        st.session_state.launch_type = ('test' if st.session_state.user_rights.get('IS_TESTER') else 'prod')
        if not st.session_state.user_rights:
            st.error("–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏. –°–æ–≥–ª–∞—Å—É–π—Ç–µ –¥–æ—Å—Ç—É–ø —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
            st.stop()
        else:
            if 'user_clusters' not in st.session_state:
                st.session_state.user_clusters = []
                cluster = st.session_state.user_rights.get('CLUSTER')
                st.session_state.user_clusters.append(cluster)
            set_up(st.session_state.conn)
            
    else:
        set_png_as_page_bg(os.path.join(curdir, r'wp10.jpg')) 
        with log_in_slot.form(key='log_in'):
            username = st.text_input(f'Username', autocomplete="username")
            password = st.text_input(f'Password', type='password', autocomplete="current-password")
            log_in_btn = st.form_submit_button('Log In')
        if log_in_btn or (username != '' and password != ''):
            try:
                st.session_state.logged_in = log_in(username, password)
            except:
                st.sidebar.error("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ")
            else:
                st.session_state.USERNAME = username.lower().replace('@tele2.ru','')
                st.session_state.password = password
                st.experimental_rerun()


if __name__ == '__main__':
    main()
    